<?xml version="1.0" encoding="UTF-8"?>
<root>
  <host value="&lt;bucketname&gt;.oss-cn-hangzhou.aliyuncs.com"/>
  <info>
    <describe value="阿里云对象存储服务（Object Storage Service，简称OSS），是阿里云对外提供的海量，安全，低成本，高可靠的云存储服务。用户可以通过本文档提供的简单的REST接口，在任何时间、任何地点、任何互联网设备上进行上传和下载数据。基于OSS，用户可以搭建出各种多媒体分享网站、网盘、个人和企业数据备份等基于大规模数据的服务。"/>
    <title value="aliyun oss api"/>
    <version value="1.0"/>
  </info>
  <parameters nodeType="array">
    <parameters>
      <default value="None   "/>
      <describe value="&lt;td&gt;用于验证请求合法性的认证信息。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无   &lt;br /&gt;使用场景：非匿名请求&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Authorization"/>
      <require value="true"/>
      <type value="string"/>
    </parameters>
    <parameters>
      <default value="None   "/>
      <describe value="&lt;td&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;中定义的HTTP请求内容长度。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无   &lt;br /&gt;使用场景：需要向OSS提交数据的请求&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Content-Length"/>
      <require value="true"/>
      <type value="string"/>
    </parameters>
    <parameters>
      <default value="None   "/>
      <describe value="&lt;td&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;中定义的HTTP请求内容类型。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无   &lt;br /&gt;使用场景：需要向OSS提交数据的请求&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Content-Type"/>
      <require value="true"/>
      <type value="string"/>
    </parameters>
    <parameters>
      <default value="None"/>
      <describe value="&lt;td&gt;HTTP 1.1协议中规定的GMT时间，例如：Wed,   05 Sep. 2012 23:00:00 GMT   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Date"/>
      <require value="true"/>
      <type value="string"/>
    </parameters>
    <parameters>
      <default value="None"/>
      <describe value="&lt;td&gt;访问Host值，格式为：&lt;code&gt;&lt;bucketname&gt;.oss-cn-hangzhou.aliyuncs.com&lt;/code&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Host"/>
      <require value="true"/>
      <type value="string"/>
    </parameters>
  </parameters>
  <paths>
    <node nodeName="/AbortMultipartUpload">
      <describe value=" 该接口可以根据用户提供的Upload ID中止其对应的Multipart Upload事件。当一个Multipart Upload事件被中止后，就不能再使用这个Upload ID做任何操作，已经上传的Part数据也会被删除。 &lt;ol&gt;&lt;li&gt;中止一个Multipart Upload事件时，如果其所属的某些Part仍然在上传，那么这次中止操作将无法删除这些Part。所以如果存在并发访问的情况，为了彻底释放OSS上的空间，需要调用几次Abort Multipart Upload接口。&lt;/li&gt;&lt;li&gt;如果输入的Upload Id不存在，OSS会返回404错误，错误码为：NoSuchUpload。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <NoSuchUpload>
          <code value="404"/>
          <describe value="如果输入的Upload Id不存在，OSS会返回404错误，错误码为：NoSuchUpload。"/>
        </NoSuchUpload>
      </response>
      <summary value="取消Multipart Upload事件"/>
    </node>
    <node nodeName="/AppendObject">
      <describe value=" Append Object以追加写的方式上传文件。通过Append Object操作创建的Object类型为Appendable Object，而通过Put Object上传的Object是Normal Object。  Appendable Object的CRC采用 ECMA-182 标准，和XZ的计算方式一样。用Boost CRC模块的方式来定义则有：  或是用Python crcmod的方式为： &lt;ol&gt;&lt;li&gt;不能对一个非Appendable Object进行Append Object操作。例如，已经存在一个同名Normal Object时，Append Object调用返回409，错误码ObjectNotAppendable。&lt;/li&gt;&lt;li&gt;对一个已经存在的Appendable Object进行Put Object操作，那么该Appendable Object会被新的Object覆盖，类型变为Normal Object。&lt;/li&gt;&lt;li&gt;Head Object操作会返回x-oss-object-type，用于表明Object的类型。对于Appendable Object来说，该值为Appendable。对Appendable Object，Head Object也会返回上述的x-oss-next-append-position和x-oss-hash-crc64ecma。&lt;/li&gt;&lt;li&gt;Get Bucket（List Objects）请求的响应XML中，会把Appendable Object的Type设为Appendable&lt;/li&gt;&lt;li&gt;可以使用Copy Object来改变它的服务器端加密的属性或是用户自定义元信息。也可以把Appendable Object拷贝成另外一个文件，新的文件也是Appendable Object。&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;URL参数append和position均为CanonicalizedResource，需要包含在签名中。&lt;/li&gt;&lt;li&gt;URL的参数必须包含append，用来指定这是一个Append Object操作。&lt;/li&gt;&lt;li&gt;URL查询参数还必须包含position，其值指定从何处进行追加。首次追加操作的position必须为0，后续追加操作的position是Object的当前长度。例如，第一次Append Object请求指定position值为0，content-length是65536；那么，第二次Append Object需要指定position为65536。每次操作成功后，响应头部x-oss-next-append-position也会标明下一次追加的position。&lt;/li&gt;&lt;li&gt;如果position的值和当前Object的长度不一致，OSS会返回409错误，错误码为PositionNotEqualToLength。发生上述错误时，用户可以通过响应头部x-oss-next-append-position来得到下一次position，并再次进行请求。&lt;/li&gt;&lt;li&gt;当Position值为0时，如果没有同名Appendable Object，或者同名Appendable Object长度为0，该请求成功；其他情况均视为Position和Object长度不匹配的情形。&lt;/li&gt;&lt;li&gt;当Position值为0，且没有同名Object存在，那么Append Object可以和Put Object请求一样，设置诸如x-oss-server-side-encryption之类的请求Header。这一点和Initiate Multipart Upload是一样的。如果在Position为0的请求时，加入了正确的x-oss-server-side-encryption头，那么后续的Append Object响应头部也会包含x-oss-server-side-encryption头，其值表明加密算法。后续如果需要更改meta，可以使用Copy Object请求。&lt;/li&gt;&lt;li&gt;由于并发的关系，即使用户把position的值设为了x-oss-next-append-position，该请求依然可能因为PositionNotEqualToLength而失败。&lt;/li&gt;&lt;li&gt;Append Object产生的Object长度限制和Put Object一样。&lt;/li&gt;&lt;li&gt;每次Append Object都会更新该Object的最后修改时间。&lt;/li&gt;&lt;li&gt;在position值正确的情况下，对已存在的Appendable Object追加一个长度为0的内容，该操作不会改变Object的状态。&lt;/li&gt;&lt;li&gt;如果Bucket的类型为Archive，则不能调用该接口，否则返回400错误，错误码为OperationNotSupported。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的网页的缓存行为；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Cache-Control"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的名称；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-Disposition"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的内容编码格式；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-Encoding"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None   "/>
          <describe value="&lt;td&gt;根据协议RFC 1864对消息内容（不包括头部）计算MD5值获得128比特位数字，对该数字进行base64编码为一个消息的Content-MD5值。该请求头可用于消息合法性的检查（消息内容是否与发送时一致）。虽然该请求头是可选项，OSS建议用户使用该请求头进行端到端检查。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无   &lt;br&gt;限制：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-MD5"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;过期时间；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br&gt;类型：整数   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Expires"/>
          <require value="true"/>
          <type value="integer"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定oss创建object时的服务器端加密编码算法。   &lt;br&gt;类型：字符串   &lt;br&gt;合法值：AES256&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-server-side-encryption"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定oss创建object时的访问权限。   &lt;br&gt;类型：字符串   &lt;br&gt;合法值：public-read，private，public-read-write&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-object-acl"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <ObjectNotAppendable>
          <code value="409"/>
          <describe value="不能对一个非Appendable Object进行Append Object操作。例如，已经存在一个同名Normal Object时，Append Object调用返回409，错误码ObjectNotAppendable。"/>
        </ObjectNotAppendable>
        <OperationNotSupported>
          <code value="400"/>
          <describe value="如果Bucket的类型为Archive，则不能调用该接口，否则返回400错误，错误码为OperationNotSupported。"/>
        </OperationNotSupported>
        <PositionNotEqualToLength>
          <code value="409"/>
          <describe value="如果position的值和当前Object的长度不一致，OSS会返回409错误，错误码为PositionNotEqualToLength。发生上述错误时，用户可以通过响应头部x-oss-next-append-position来得到下一次position，并再次进行请求。"/>
        </PositionNotEqualToLength>
      </response>
      <summary value="在Object尾追加上传数据"/>
    </node>
    <node nodeName="/Callback">
      <describe value=" 用户只需要在发送给OSS的请求中携带相应的Callback参数，即能实现回调。现在支持CallBack的API 接口有：PutObject、PostObject、CompleteMultipartUpload。  CallBack参数是由一段经过base64编码的Json字串，用户关键需要指定请求回调的服务器URL（callbackUrl）以及回调的内容（callbackBody）。详细的Json字段如下：  示例json串如下  其中callbackBody中可以设置的系统变量有，其中imageInfo针对于图片格式，如果为非图片格式都为空：  用户可以通过callback-var参数来配置自定义参数。  自定义参数是一个Key-Value的Map，用户可以配置自己需要的参数到这个Map。在OSS发起POST回调请求的时候，会将这些参数和上一节所述的系统参数一起放在POST请求的body中以方便接收回调方获取。  构造完成上述的callback和callback-var两个参数之后，一共有三种方式传给OSS。其中callback为必填参数，callback-var为可选参数，如果没有自定义参数的话可以不用添加callback-var字段。这三种方式如下：  这三种方式只能同时使用其中一种，否则OSS会返回InvalidArgument错误。  要将参数附加到OSS的请求中，首先要将上文构造的json字符串使用base64编码，然后按照如下的方法附加到OSS的请求中：  那么POST请求的表单域应该如下：  同时可以在policy中添加callback条件（如果不添加callback，则不对该参数做上传验证）如：  如果文件上传成功，OSS会根据用户的请求中的callback参数和自定义参数（callback-var参数），将特定内容以POST方式发送给应用服务器。  比如应用服务器端返回的回应请求为：  再给客户端的内容为：  需要注意的是，如果类似CompleteMultipartUpload这样的请求，在返回请求本身body中存在内容（如XMl格式的信息），使用上传回调功能后会覆盖原有的body的内容如 {&quot;a&quot;:&quot;b&quot;} ，希望对此处做好判断处理。  用户设置callback参数后，OSS将按照用户设置的callbackUrl发送POST回调请求给用户的应用服务器。应用服务器收到回调请求之后，如果希望验证回调请求确实是由OSS发起的话，那么可以通过在回调中带上签名来验证OSS的身份。  签名在OSS端发生，采用RSA非对称方式签名，私钥加密的过程为：  说明：其中private_key为私钥，只有oss知晓，path为回调请求的资源路径，query_string为查询字符串，body为回调的消息体，所以签名过程由以下几步组成：  如下例：  path为 /index.php ，query_string为 ?id=1&amp;index=2 ，body为 bucket=yonghu-test ，最终签名结果为 kKQeGTRccDKyHB3H9vF+xYMSrmhMZjzzl2/kdD1ktNVgbWEfYTQG0G2SU/RaHBovRCE8OkQDjC3uG33esH2txA==   验证签名的过程即为签名的逆过程，由应用服务器验证，过程如下：  字段的含义与签名过程中描述相同，其中public_key为公钥， authorization为回调头中的签名，整个验证签名的过程分为以下几步：  这里需要注意，用户需要校验 x-oss-pub-key-url 头的值必须以 http://gosspublic.alicdn.com/ 或者 https://gosspublic.alicdn.com/ 开头，目的是为了保证这个publickey是由OSS颁发的。  以上例为例：  以下为一段python示例，演示了一个简单的应用服务器，主要是说明验证签名的方法，此示例需要安装M2Crypto库  其它语言实现的应用服务器如下：  Java版本  PHP版本:  Python版本：  Ruby版本：  如果传入的callback或者callback-var不合法，则会返回400错误，错误码为”InvalidArgument”，不合法的情况包括以下几类：  如果回调失败，则返回203，错误码为”CallbackFailed”，回调失败只是表示OSS没有收到预期的回调响应，不代表应用服务器没有收到回调请求（比如应用服务器返回的内容不是json格式），另外，此时文件已经成功上传到了OSS  应用服务器返回OSS的响应必须带有Content-Length的Header，Body大小不要超过1MB。 "/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;- 文件上传成功后OSS向此url发送回调请求，请求方法为POST，body为callbackBody指定的内容。正常情况下，该url需要响应“HTTP/1.1 200 OK”，body必须为JSON格式，响应头Content-Length必须为合法的值，且不超过3MB。&lt;br&gt;  - 支持同时配置最多5个url，以”;”分割。OSS会依次发送请求直到第一个返回成功为止。&lt;br&gt; - 如果没有配置或者值为空则认为没有配置callback。 &lt;br&gt;  - 支持HTTPS地址。 &lt;br&gt; - 为了保证正确处理中文等情况，callbackUrl需做url编码处理，比如&lt;code&gt;http://example.com/中文.php?key=value&amp;中文名称=中文值&lt;/code&gt; 需要编码成 &lt;code&gt;http://example.com/%E4%B8%AD%E6%96%87.php?key=value&amp;%E4%B8%AD%E6%96%87%E5%90%8D%E7%A7%B0=%E4%B8%AD%E6%96%87%E5%80%BC&lt;/code&gt;&lt;/td&gt;"/>
              <in value="header"/>
              <name value="callbackUrl"/>
              <require value="必选项"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;- 发起回调请求时Host头的值，只有在设置了callbackUrl时才有效。&lt;br&gt;  - 如果没有配置 callbckHost，则会解析callbackUrl中的url并将解析出的host填充到callbackHost中&lt;/td&gt;"/>
              <in value="header"/>
              <name value="callbackHost"/>
              <require value="false"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;- 发起回调时请求body的值，例如：key=$(key)&amp;etag=$(etag)&amp;my_var=$(x:my_var)。  &lt;br&gt; - 支持OSS系统变量、自定义变量和常量，支持的系统变量如下表所示 。自定义变量的支持方式在PutObject和CompleteMultipart中是通过callback-var来传递，在PostObject中则是将各个变量通过表单域来传递。&lt;/td&gt;"/>
              <in value="header"/>
              <name value="callbackBody"/>
              <require value="必选项"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;- 发起回调请求的Content-Type，支持application/x-www-form-urlencoded和application/json，默认为前者。&lt;br&gt;  - 如果为application/x-www-form-urlencoded，则callbackBody中的变量将会被经过url编码的值替换掉，如果为application/json，则会按照json格式替换其中的变量。&lt;/td&gt;"/>
              <in value="header"/>
              <name value="callbackBodyType"/>
              <require value="false"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="上传回调"/>
    </node>
    <node nodeName="/CompleteMultipartUpload">
      <describe value=" 在将所有数据Part都上传完成后，必须调用Complete Multipart Upload API来完成整个文件的Multipart Upload。在执行该操作时，用户必须提供所有有效的数据Part的列表（包括part号码和ETAG）；OSS收到用户提交的Part列表后，会逐一验证每个数据Part的有效性。当所有的数据Part验证通过后，OSS将把这些数据part组合成一个完整的Object。  Complete Multipart Upload时，可以通过encoding-type对返回结果中的Key进行编码。 &lt;ol&gt;&lt;li&gt;Complete Multipart Upload时，会确认除最后一块以外所有块的大小都大于100KB，并检查用户提交的Partlist中的每一个Part号码和Etag。所以在上传Part时，客户端除了需要记录Part号码外，还需要记录每次上传Part成功后，服务器返回的ETag值。&lt;/li&gt;&lt;li&gt;OSS处理Complete Multipart Upload请求时，会持续一定的时间。在这段时间内，如果客户端和OSS之间的链接断掉，OSS仍会继续将请求做完。&lt;/li&gt;&lt;li&gt;用户提交的Part List中,Part号码可以是不连续的。例如第一块的Part号码是1；第二块的Part号码是5。&lt;/li&gt;&lt;li&gt;OSS处理Complete Multipart Upload请求成功后，该Upload ID就会变成无效。&lt;/li&gt;&lt;li&gt;同一个Object可以同时拥有不同的Upload Id，当Complete一个Upload ID后，该Object的其他Upload ID不受影响。&lt;/li&gt;&lt;li&gt;若调用Initiate Multipart Upload接口时，指定了x-oss-server-side-encryption请求头，则在Complete Multipart Upload的响应头中，会返回x-oss-server-side-encryption，其值表明该Object的服务器端加密算法。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定对返回的Key进行编码，目前支持url编码。Key使用UTF-8字符，但xml 1.0标准不支持解析一些控制字符，比如ascii值从0到10的字符。对于Key中包含xml 1.0标准不支持的控制字符，可以通过指定encoding-type对返回的Key进行编码。&lt;br /&gt;数据类型：字符串&lt;br /&gt;默认值：无,可选值：url&lt;/td&gt;"/>
          <enum value="url"/>
          <in value="quary"/>
          <name value="encoding-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;保存Complete   Multipart Upload请求内容的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：一个或多个Part元素   &lt;br /&gt;父节点：无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="CompleteMultipartUpload"/>
          <require value="true"/>
          <type value="Object"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;保存已经上传Part信息的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：ETag,   PartNumber   &lt;br /&gt;父节点：InitiateMultipartUploadResult&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="Part"/>
          <require value="true"/>
          <schema nodeType="array">
            <schema>
              <describe value="&lt;td&gt;Part成功上传后，OSS返回的ETag值。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：Part&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ETag"/>
              <require value="true"/>
              <type value="string"/>
            </schema>
            <schema>
              <describe value="&lt;td&gt;Part数目。   &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：Part&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="PartNumber"/>
              <require value="true"/>
              <type value="integer"/>
            </schema>
          </schema>
          <type value="Object"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Complete   Multipart Upload请求结果的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：Bucket, Key, ETag, Location   &lt;br /&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CompleteMultipartUploadResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;Bucket名称。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CompleteMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Bucket"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;ETag   (entity tag) 在每个Object生成的时候被创建，用于标示一个Object的内容。Complete   Multipart Upload请求创建的Object，ETag值是其内容的UUID。ETag值可以用于检查Object内容是否发生变化。.   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CompleteMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="ETag"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;新创建Object的URL。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CompleteMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Location"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;新创建Object的名字。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CompleteMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Key"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指明返回结果中编码使用的类型。如果请求的参数中指定了encoding-type，那返回的结果会对Key进行编码。&lt;br /&gt;类型：字符串&lt;br /&gt;父节点：容器&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="EncodingType"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
          </properties>
        </node>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
      </response>
      <summary value="完成整个文件的Multipart Upload上传"/>
    </node>
    <node nodeName="/CopyObject">
      <describe value=" 拷贝一个在OSS上已经存在的object成另外一个object，可以发送一个PUT请求给OSS，并在PUT请求头中添加元素“x-oss-copy-source”来指定拷贝源。OSS会自动判断出这是一个Copy操作，并直接在服务器端执行该操作。如果拷贝成功，则返回新的object信息给用户。该操作适用于拷贝小于1GB的文件，当拷贝一个大于1GB的文件时，必须使用Multipart Upload操作，具体见Upload Part Copy。 &lt;ol&gt;&lt;li&gt;可以通过拷贝操作来实现修改已有Object的meta信息。&lt;/li&gt;&lt;li&gt;如果拷贝操作的源Object地址和目标Object地址相同，则无论x-oss-metadata-directive为何值，都会直接替换源Object的meta信息。&lt;/li&gt;&lt;li&gt;OSS支持拷贝操作的四个预判断Header任意个同时出现，相应逻辑参见Get Object操作的细节分析。&lt;/li&gt;&lt;li&gt;拷贝操作需要请求者对源Object有读权限。&lt;/li&gt;&lt;li&gt;源Object和目标Object必须属于同一个数据中心，否则返回403 AccessDenied，错误信息为：Target object does not reside in the same data center as source object。&lt;/li&gt;&lt;li&gt;拷贝操作的计费统计会对源Object所在的Bucket增加一次Get请求次数，并对目标Object所在的Bucket增加一次Put请求次数，以及相应的新增存储空间。&lt;/li&gt;&lt;li&gt;拷贝操作涉及到的请求头，都是以“x-oss-”开头的，所以要加入签名字符串中。&lt;/li&gt;&lt;li&gt;若在拷贝操作中指定了x-oss-server-side-encryption请求头，并且请求值合法（为AES256），则无论源Object是否进行过服务器端加密编码，拷贝之后的目标Object都会进行服务器端加密编码。并且拷贝操作的响应头中会包含x-oss-server-side-encryption，值被设置成目标Object的加密算法。在这个目标Object被下载时，响应头中也会包含x-oss-server-side-encryption，值被设置成该Object的加密算法；若拷贝操作中未指定x-oss-server-side-encryption请求头，则无论源Object是否进行过服务器端加密编码，拷贝之后的目标Object都是未进行过服务器端加密编码加密的数据。&lt;/li&gt;&lt;li&gt;拷贝操作中x-oss-metadata-directive请求头为COPY（默认值）时，并不拷贝源Object的x-oss-server-side-encryption值，即目标Object是否进行服务器端加密编码只根据COPY操作是否指定了x-oss-server-side-encryption请求头来决定。&lt;/li&gt;&lt;li&gt;若在拷贝操作中指定了x-oss-server-side-encryption请求头，并且请求值非AES256，则返回400和相应的错误提示：InvalidEncryptionAlgorithmError。&lt;/li&gt;&lt;li&gt;如果拷贝的文件大小大于1GB，会返回400和错误提示：EntityTooLarge。&lt;/li&gt;&lt;li&gt;该操作不能拷贝通过Append追加上传方式产生的object。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，只拷贝符号链接。&lt;/li&gt;&lt;li&gt;如果Bucket的类型为Archive，则不能调用该接口，否则返回400错误，错误码为OperationNotSupported。&lt;h2 id=&quot;h2-u793Au4F8B&quot;&gt;&lt;a name=&quot;示例&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;&gt;&lt;/span&gt;示例&lt;/h2&gt;&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <default value="None"/>
              <describe value="&lt;td&gt;Copy   Object结果&lt;br&gt;类型：字符串&lt;br&gt;默认值：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CopyObjectResult"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;新Object的ETag值。&lt;br&gt;类型：字符串&lt;br&gt;父元素：CopyObjectResult&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ETag"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;新Object最后更新时间。&lt;br&gt;类型：字符串&lt;br&gt;父元素：CopyObjectResult&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LastModified"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
          </properties>
        </node>
        <OperationNotSupported>
          <code value="400"/>
          <describe value="如果Bucket的类型为Archive，则不能调用该接口，否则返回400错误，错误码为OperationNotSupported。示例"/>
        </OperationNotSupported>
      </response>
      <summary value="拷贝一个object成另外一个object"/>
    </node>
    <node nodeName="/DeleteBucket">
      <describe value=" Delete Bucket用于删除某个Bucket。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;为了防止误删除的发生，OSS不允许用户删除一个非空的Bucket。&lt;/li&gt;&lt;li&gt;如果试图删除一个不为空的Bucket，返回409 Conflict错误，错误码：BucketNotEmpty。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能删除这个Bucket。如果试图删除一个没有对应权限的Bucket，返回403 Forbidden错误。错误码：AccessDenied。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能删除这个Bucket。如果试图删除一个没有对应权限的Bucket，返回403 Forbidden错误。错误码：AccessDenied。"/>
        </AccessDenied>
        <BucketNotEmpty>
          <code value="409"/>
          <describe value="如果试图删除一个不为空的Bucket，返回409 Conflict错误，错误码：BucketNotEmpty。"/>
        </BucketNotEmpty>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="删除Bucket"/>
    </node>
    <node nodeName="/DeleteBucketLifecycle">
      <describe value=" 通过Delete Bucket Lifecycle来删除指定Bucket的生命周期配置。 &lt;ol&gt;&lt;li&gt;本操作会删除指定Bucket的所有的生命周期规则。此后，该Bucket中不会有Object被自动删除。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能删除Bucket的Lifecycle配置。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能删除Bucket的Lifecycle配置。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。"/>
        </AccessDenied>
      </response>
      <summary value="删除Bucket中Object的生命周期规则"/>
    </node>
    <node nodeName="/DeleteBucketLogging">
      <describe value=" Delete Bucket Logging操作用于关闭bucket访问日志记录功能。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误，错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能关闭Bucket访问日志记录功能。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果目标Bucket并没有开启Logging功能，仍然返回HTTP状态码 204。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能关闭Bucket访问日志记录功能。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误，错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="关闭Bucket访问日志记录功能"/>
    </node>
    <node nodeName="/DeleteBucketWebsite">
      <describe value=" Delete Bucket Website操作用于关闭bucket的静态网站托管模式。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误，错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能关闭Bucket的静态网站托管模式。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能关闭Bucket的静态网站托管模式。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误，错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="关闭Bucket的静态网站托管模式"/>
    </node>
    <node nodeName="/DeleteBucketcors">
      <describe value=" Delete Bucket cors用于关闭指定Bucket对应的CORS功能并清空所有规则。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误，错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能删除Bucket对应的CORS规则。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能删除Bucket对应的CORS规则。如果试图操作一个不属于你的Bucket，OSS返回403 Forbidden错误，错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误，错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="关闭指定Bucket对应的CORS功能并清空所有规则"/>
    </node>
    <node nodeName="/DeleteLiveChannel">
      <describe value=" 本接口用来删除指定的LiveChannel。 &lt;ol&gt;&lt;li&gt;当有客户端正在向LiveChannel推流时，删除请求会失败。&lt;/li&gt;&lt;li&gt;注意，本接口只会删除LiveChannel本身，不会删除推流生成的文件。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
      </response>
      <summary value="DeleteLiveChannel"/>
    </node>
    <node nodeName="/DeleteMultipleObjects">
      <describe value=" Delete Multiple Objects操作支持用户通过一个HTTP请求删除同一个Bucket中的多个Object。Delete Multiple Objects操作支持一次请求内最多删除1000个Object，并提供两种返回模式：详细(verbose)模式和简单(quiet)模式:  Delete Multiple Objects时，可以通过encoding-type对返回结果中的Key进行编码。 &lt;ol&gt;&lt;li&gt;Delete Multiple Objects请求必须填Content-Length和Content-MD5字段。OSS会根据这些字段验证收到的消息体是正确的，之后才会执行删除操作。&lt;/li&gt;&lt;li&gt;生成Content-MD5字段内容方法：首先将Delete Multiple Object请求内容经过MD5加密后得到一个128位字节数组；再将该字节数组用base64算法编码；最后得到的字符串即是Content-MD5字段内容。&lt;/li&gt;&lt;li&gt;Delete Multiple Objects请求默认是详细(verbose)模式。&lt;/li&gt;&lt;li&gt;在Delete Multiple Objects请求中删除一个不存在的Object，仍然认为是成功的。&lt;/li&gt;&lt;li&gt;Delete Multiple Objects的消息体最大允许2MB的内容，超过2MB会返回MalformedXML错误码。&lt;/li&gt;&lt;li&gt;Delete Multiple Objects请求最多允许一次删除1000个Object；超过1000个Object会返回MalformedXML错误码。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None "/>
          <describe value="&lt;td&gt;指定对返回的Key进行编码，目前支持url编码。Key使用UTF-8字符，但xml 1.0标准不支持解析一些控制字符，比如ascii值从0到10的字符。对于Key中包含xml 1.0标准不支持的控制字符，可以通过指定encoding-type对返回的Key进行编码。&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无 &lt;br&gt;  可选值：url&lt;/td&gt;"/>
          <enum value="url"/>
          <in value="quary"/>
          <name value="encoding-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;保存Delete   Multiple Object请求的容器。   &lt;br&gt;类型：容器   &lt;br&gt;子节点：一个或多个Object元素，可选的Quiet元素   &lt;br&gt;父节点： None.&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="Delete"/>
          <require value="true"/>
          <schema nodeType="array">
            <schema>
              <describe value="&lt;td&gt;保存一个Object信息的容器。   &lt;br&gt;类型：容器   &lt;br&gt;子节点：key   &lt;br&gt;父节点：Delete&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Object"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;被删除Object的名字。   &lt;br&gt;类型：字符串   &lt;br&gt;父节点：Object&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Key"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </schema>
            <schema>
              <default value="false   "/>
              <describe value="&lt;td&gt;打开“简单”响应模式的开关。   &lt;br&gt;类型：枚举字符串   &lt;br&gt;有效值：true、false   &lt;br&gt;默认值：false   &lt;br&gt;父节点：Delete&lt;/td&gt;"/>
              <enum value="true、false   "/>
              <in value="formData"/>
              <name value="Quiet"/>
              <require value="true"/>
              <type value="string"/>
            </schema>
          </schema>
          <type value="Object"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Delete   Multiple Object请求结果的容器。   &lt;br&gt;类型：容器   &lt;br&gt;子节点：Deleted   &lt;br&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="DeleteResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;保存被成功删除的Object的容器。   &lt;br&gt;类型：容器   &lt;br&gt;子节点：Key   &lt;br&gt;父节点：DeleteResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Deleted"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;OSS执行删除操作的Object名字。   &lt;br&gt;类型：字符串   &lt;br&gt;父节点：Deleted&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Key"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指明返回结果中编码使用的类型。如果请求的参数中指定了encoding-type，那返回的结果会对Key进行编码。&lt;br&gt;类型：字符串&lt;br&gt;父节点：容器&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="EncodingType"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
          </properties>
        </node>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
        <MalformedXML>
          <describe value="Delete Multiple Objects请求最多允许一次删除1000个Object；超过1000个Object会返回MalformedXML错误码。"/>
        </MalformedXML>
      </response>
      <summary value="删除多个Object"/>
    </node>
    <node nodeName="/DeleteObject">
      <describe value=" DeleteObject用于删除某个Object。 &lt;ol&gt;&lt;li&gt;DeleteObject要求对该Object要有写权限。&lt;/li&gt;&lt;li&gt;如果要删除的Object不存在，OSS也返回状态码204（ No Content）。&lt;/li&gt;&lt;li&gt;如果Bucket不存在，返回404 Not Found。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，只删除符号链接自身。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
      </response>
      <summary value="删除Object"/>
    </node>
    <node nodeName="/GetBucket(ListObject)">
      <describe value=" Get Bucket操作可用来list Bucket中所有Object的信息。  GetBucket（ListObject）时，可以通过prefix，marker，delimiter和max-keys对list做限定，返回部分结果。另外，可以通过encoding-type对返回结果中的Delimiter、Marker、Prefix、NextMarker和Key这些元素进行编码。  在bucket“my_oss”内有4个object，名字分别为： &lt;ol&gt;&lt;li&gt;Object中用户自定义的meta，在GetBucket请求时不会返回。&lt;/li&gt;&lt;li&gt;如果访问的Bucket不存在，包括试图访问因为命名不规范无法创建的Bucket，返回404 Not Found错误，错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;如果没有访问该Bucket的权限，返回403 Forbidden错误，错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果因为max-keys的设定无法一次完成listing，返回结果会附加一个&lt;code&gt;&lt;NextMarker&gt;&lt;/code&gt;，提示继续listing可以以此为marker。NextMarker中的值仍在list结果之中。&lt;/li&gt;&lt;li&gt;在做条件查询时，即使marker实际在列表中不存在，返回也从符合marker字母排序的下一个开始打印。如果max-keys小于0或者大于1000，将返回400 Bad Request错误。错误码：InvalidArgument。&lt;/li&gt;&lt;li&gt;若prefix，marker，delimiter参数不符合长度要求，返回400 Bad Request。错误码：InvalidArgument。&lt;/li&gt;&lt;li&gt;prefix，marker用来实现分页显示效果，参数的长度必须小于1024字节。&lt;/li&gt;&lt;li&gt;如果把prefix设为某个文件夹名，就可以罗列以此prefix开头的文件，即该文件夹下递归的所有的文件和子文件夹。如果再把delimiter设置为 / 时，返回值就只罗列该文件夹下的文件，该文件夹下的子文件名返回在CommonPrefixes部分，子文件夹下递归的文件和文件夹不被显示。如一个bucket存在三个object :fun/test.jpg， fun/movie/001.avi， fun/movie/007.avi。若设定prefix为”fun/” ，则返回三个object；如果增加设定delimiter为“/”，则返回文件”fun/test.jpg”和前缀”fun/movie/”；即实现了文件夹的逻辑。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;是一个用于对Object名字进行分组的字符。所有名字包含指定的前缀且第一次出现delimiter字符之间的object作为一组元素——CommonPrefixes。&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="delimiter"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设定结果从marker之后按字母排序的第一个开始返回。&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="marker"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="100"/>
          <describe value="&lt;td&gt;限定此次返回object的最大数，如果不设定，默认为100，max-keys取值不能大于1000。&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：100&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="max-keys"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;限定返回的object   key必须以prefix作为前缀。注意使用prefix查询时，返回的key中仍会包含prefix。&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="prefix"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定对返回的内容进行编码，指定编码的类型。Delimiter、Marker、Prefix、NextMarker和Key使用UTF-8字符，但xml 1.0标准不支持解析一些控制字符，比如ascii值从0到10的字符。对于包含xml 1.0标准不支持的控制字符，可以通过指定encoding-type对返回的Delimiter、Marker、Prefix、NextMarker和Key进行编码。&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无，可选值：url&lt;/td&gt;"/>
          <enum value="url"/>
          <in value="quary"/>
          <name value="encoding-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;如果请求中指定了delimiter参数，则在OSS返回的响应中包含CommonPrefixes元素。该元素标明那些以delimiter结尾，并有共同前缀的object名称的集合。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CommonPrefixes"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指明返回结果中编码使用的类型。如果请求的参数中指定了encoding-type，那会对返回结果中的Delimiter、Marker、Prefix、NextMarker和Key这些元素进行编码。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="EncodingType"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;ETag   (entity tag) 在每个Object生成的时候被创建，用于标示一个Object的内容。对于Put Object请求创建的Object，ETag值是其内容的MD5值；对于其他方式创建的Object，ETag值是其内容的UUID。ETag值可以用于检查Object内容是否发生变化。不建议用户使用ETag来作为Object内容的MD5校验数据完整性。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult.Contents&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ETag"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指明是否所有的结果都已经返回； “true”表示本次没有返回全部结果；“false”表示本次已经返回了全部结果。&lt;br&gt;类型：枚举字符串&lt;br&gt;有效值：true、false&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
              <enum value="true、false"/>
              <in value="formData"/>
              <name value="IsTruncated"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;Object最后被修改的时间。&lt;br&gt;类型：时间&lt;br&gt;父节点：ListBucketResult.Contents&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LastModified"/>
              <require value="true"/>
              <type value="date-time"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;保存Get   Bucket请求结果的容器.&lt;br&gt;类型：容器   子节点：Name,   Prefix, Marker, MaxKeys, Delimiter, IsTruncated, Nextmarker, Contents&lt;br&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ListBucketResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;保存每个返回Object   meta的容器。&lt;br&gt;类型：容器&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Contents"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Object的Key.&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult.Contents&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Key"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Object的字节数。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult.Contents&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Size"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Object的存储类型，支持“Standard”、“IA”、“Archive”。（目前只有部分区域支持“Archive”类型）&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult.Contents&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="StorageClass"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;是一个用于对Object名字进行分组的字符。所有名字包含指定的前缀且第一次出现delimiter字符之间的object作为一组元素——CommonPrefixes。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Delimiter"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;标明这次Get   Bucket（List   Object）的起点。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Marker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;响应请求内返回结果的最大数目。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="MaxKeys"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;Bucket名字&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Name"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存Bucket拥有者信息的容器。&lt;br&gt;类型：容器   子节点：DisplayName,   ID&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Owner"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Object   拥有者的名字。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult.Contents.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="DisplayName"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的用户ID。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult.Contents.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="ID"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;本次查询结果的开始前缀。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListBucketResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Prefix"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="如果没有访问该Bucket的权限，返回403 Forbidden错误，错误码：AccessDenied。"/>
        </AccessDenied>
        <InvalidArgument>
          <code value="400"/>
          <describe value="若prefix，marker，delimiter参数不符合长度要求，返回400 Bad Request。错误码：InvalidArgument。"/>
        </InvalidArgument>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果访问的Bucket不存在，包括试图访问因为命名不规范无法创建的Bucket，返回404 Not Found错误，错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="获得Bucket中所有Object的信息"/>
    </node>
    <node nodeName="/GetBucketAcl">
      <describe value=" Get Bucket ACL用来获取某个Bucket的访问权限。 &lt;ol&gt;&lt;li&gt;只有Bucket的拥有者才能使用Get Bucket ACL这个接口。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Get   Bucket ACL结果的容器&lt;br /&gt;类型：容器&lt;br /&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="AccessControlPolicy"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;存储ACL信息的容器&lt;br /&gt;类型：容器&lt;br /&gt;父节点：AccessControlPolicy&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="AccessControlList"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Bucket的ACL权限。&lt;br /&gt;类型：枚举字符串&lt;br /&gt;有效值：private、public-read、public-read-write&lt;br /&gt;父节点：AccessControlPolicy.AccessControlList&lt;/td&gt;"/>
                      <enum value="private、public-read、public-read-write"/>
                      <in value="formData"/>
                      <name value="Grant"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存Bucket拥有者信息的容器。&lt;br /&gt;类型：容器&lt;br /&gt;父节点：AccessControlPolicy&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Owner"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的名称.。(目前和ID一致)&lt;br /&gt;类型：字符串&lt;br /&gt;父节点：AccessControlPolicy.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="DisplayName"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的用户ID&lt;br /&gt;类型：字符串&lt;br /&gt;父节点：AccessControlPolicy.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="ID"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="获得Bucket访问权限"/>
    </node>
    <node nodeName="/GetBucketInfo">
      <describe value=" Get Bucket Info操作用于查看bucket的相关信息。包括如下内容： &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能查看Bucket的信息，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;请求可以从任何一个OSS的Endpoint发起。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Bucket信息内容的容器   &lt;br /&gt;类型：容器    &lt;br /&gt;子节点：Bucket节点   &lt;br /&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="BucketInfo"/>
              <require value="true"/>
              <type value="Object"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;Bucket创建时间。时间格式 2013-07-31T10:56:21.000Z  &lt;br /&gt; 类型：时间&lt;br /&gt;父节点：BucketInfo.Bucket&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CreationDate"/>
              <require value="true"/>
              <type value="date-time"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;同区域ECS访问Bucket的内网域名&lt;br /&gt; 类型：字符串&lt;br /&gt;父节点：BucketInfo.Bucket&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="IntranetEndpoint"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;Bucket名字&lt;br /&gt; 类型：字符串&lt;br /&gt;父节点：BucketInfo.Bucket&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Name"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;Bucket拥有者的用户ID。&lt;br /&gt;类型：字符串&lt;br /&gt;父节点：BucketInfo.Bucket.Owner&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ID"/>
              <require value=""/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;存储ACL信息的容器&lt;br /&gt;类型：容器&lt;br /&gt;父节点：BucketInfo.Bucket&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="AccessControlList"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;Bucket的ACL权限。&lt;br /&gt;类型：枚举字符串&lt;br /&gt;有效值：private、public-read、public-read-write&lt;br /&gt;父节点：BucketInfo.Bucket.AccessControlList&lt;/td&gt;"/>
                  <enum value="private、public-read、public-read-write"/>
                  <in value="formData"/>
                  <name value="Grant"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能查看Bucket的信息，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="获取Bucket信息"/>
    </node>
    <node nodeName="/GetBucketLifecycle">
      <describe value=" Get Bucket Lifecycle用于查看Bucket的Lifecycle配置。 &lt;ol&gt;&lt;li&gt;只有Bucket的拥有者才能查看Bucket的Lifecycle配置，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果Bucket或Lifecycle不存在，返回404 Not Found错误，错误码：NoSuchBucket或NoSuchLifecycle。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能查看Bucket的Lifecycle配置，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket或Lifecycle不存在，返回404 Not Found错误，错误码：NoSuchBucket或NoSuchLifecycle。"/>
        </NoSuchBucket>
      </response>
      <summary value="查看Bucket中Object的生命周期规则"/>
    </node>
    <node nodeName="/GetBucketLocation">
      <describe value=" Get Bucket Location用于查看Bucket所属的数据中心位置信息。 &lt;ol&gt;&lt;li&gt;只有Bucket的拥有者才能查看Bucket的Location信息，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;目前LocationConstraint有效值：oss-cn-hangzhou，oss-cn-qingdao，oss-cn-beijing，oss-cn-hongkong，oss-cn-shenzhen，oss-cn-shanghai，oss-us-west-1，oss-us-east-1，oss-ap-southeast-1；分别对应杭州数据中心，青岛数据中心，北京数据中心、香港数据中心、深圳数据中心、上海数据中心、美国硅谷数据中心、美国弗吉尼亚数据中心和亚太（新加坡）数据中心。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;Bucket所在的区域&lt;br /&gt;类型：字符串&lt;br /&gt;Values: oss-cn-hangzhou、oss-cn-qingdao、oss-cn-beijing、oss-cn-hongkong、oss-cn-shenzhen、oss-cn-shanghai&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LocationConstraint"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能查看Bucket的Location信息，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
      </response>
      <summary value="获得Bucket所属的数据中心位置信息"/>
    </node>
    <node nodeName="/GetBucketLogging">
      <describe value=" Get Bucket Logging用于查看Bucket的访问日志配置情况。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能查看Bucket的访问日志配置情况，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果源Bucket未设置Logging规则，OSS仍然返回一个XML消息体，但其中的BucketLoggingStatus元素为空。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;访问日志状态信息的容器&lt;br /&gt;类型: 容器&lt;br /&gt;子元素:   LoggingEnabled&lt;br /&gt;父元素:   无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="BucketLoggingStatus"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;访问日志信息的容器。这个元素在开启时需要，关闭时不需要。&lt;br /&gt;类型: 容器&lt;br /&gt;子元素:   TargetBucket, TargetPrefix&lt;br /&gt;父元素:   BucketLoggingStatus&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LoggingEnabled"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指定存放访问日志的Bucket。&lt;br /&gt;类型: 字符&lt;br /&gt;子元素:   无&lt;br /&gt;父元素:   BucketLoggingStatus.LoggingEnabled&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="TargetBucket"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指定最终被保存的访问日志文件前缀。&lt;br /&gt;类型:   字符&lt;br /&gt;子元素:   None&lt;br /&gt;父元素:   BucketLoggingStatus.LoggingEnabled&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="TargetPrefix"/>
              <require value="true"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能查看Bucket的访问日志配置情况，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="查看Bucket的访问日志配置情况"/>
    </node>
    <node nodeName="/GetBucketReferer">
      <describe value=" Get Bucket Referer操作用于查看bucket的Referer相关配置。Bucket Referer防盗链具体见 OSS防盗链 。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能查看Bucket的Referer配置信息，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果Bucket未进行Referer相关配置，OSS会返回默认的AllowEmptyReferer值和空的RefererList。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Referer配置内容的容器   &lt;br /&gt;类型：容器    &lt;br /&gt;子节点：AllowEmptyReferer节点、RefererList节点   &lt;br /&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="RefererConfiguration"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <default value="true "/>
                  <describe value="&lt;td&gt;指定是否允许referer字段为空的请求访问。  &lt;br /&gt;类型：枚举字符串 有效值：true 或 false`默认值：true &lt;br /&gt;父节点：RefererConfiguration&lt;/td&gt;"/>
                  <enum value="true 或 false`默认值：true "/>
                  <in value="formData"/>
                  <name value="AllowEmptyReferer"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存referer访问白名单的容器。 &lt;br /&gt;类型：容器 &lt;br /&gt;父节点：RefererConfiguration &lt;br /&gt;子节点：Referer&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="RefererList"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;指定一条referer访问白名单。 &lt;br /&gt;类型：字符串 &lt;br /&gt;父节点：RefererList&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Referer"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能查看Bucket的Referer配置信息，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="查看Bucket的防盗链规则"/>
    </node>
    <node nodeName="/GetBucketWebsite">
      <describe value=" Get Bucket Website操作用于查看bucket的静态网站托管状态。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能查看Bucket的静态网站托管状态，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果源Bucket未设置静态网站托管功能，OSS会返回404错误，错误码为：NoSuchWebsiteConfiguration。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;子元素Key的父元素&lt;br /&gt;类型: 容器&lt;br /&gt;父元素: WebsiteConfiguration&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ErrorDocument"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;子元素Suffix的父元素. &lt;br /&gt;类型: 容器&lt;br /&gt;父元素: WebsiteConfiguration&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="IndexDocument"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;返回404错误时使用的文件名 &lt;br /&gt;类型:字符串  父元素: WebsiteConfiguration.ErrorDocument&lt;br /&gt;有条件：当ErrorDocument设置时，必需&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Key"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;返回目录URL时添加的索引文件名，不要为空，也不要包含&quot;/&quot;。例如索引文件设置为index.html，则访问:oss-cn-hangzhou.aliyuncs.com/mybucket/mydir/这样请求的时候默认都相当于访问oss-cn-hangzhou.aliyuncs.com/mybucket/index.html &lt;br /&gt;类型:字符串&lt;br /&gt;父元素: WebsiteConfiguration.IndexDocument&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Suffix"/>
              <require value="true"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;请求的容器 &lt;br /&gt;类型：容器&lt;br /&gt;父元素: 无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="WebsiteConfiguration"/>
              <require value="true"/>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能查看Bucket的静态网站托管状态，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
        <NoSuchWebsiteConfiguration>
          <code value="404"/>
          <describe value="如果源Bucket未设置静态网站托管功能，OSS会返回404错误，错误码为：NoSuchWebsiteConfiguration。"/>
        </NoSuchWebsiteConfiguration>
      </response>
      <summary value="查看Bucket的静态网站托管状态"/>
    </node>
    <node nodeName="/GetBucketcors">
      <describe value=" Get Bucket cors操作用于获取指定的Bucket目前的CORS规则。 &lt;ol&gt;&lt;li&gt;如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;只有Bucket的拥有者才能获取CORS规则，否则返回403 Forbidden错误,错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果CORS规则不存在，返回404 Not Found错误，错误码NoSuchCORSConfiguration。 &lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;指定允许的跨域请求的来源，允许使用多个元素来指定多个允许的来源。   允许使用最多一个“*”通配符。如果指定为“*”则表示允许所有的来源的跨域请求。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="AllowedOrigin"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;控制在OPTIONS预取指令中Access-Control-Request-Headers头中指定的header是否允许。在Access-Control-Request-Headers中指定的每个header都必须在AllowedHeader中有一条对应的项。允许使用最多一个“*”通配符   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="AllowedHeader"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;指定浏览器对特定资源的预取（OPTIONS）请求返回结果的缓存时间，单位为秒。   一个CORSRule里面最多允许出现一个。   &lt;br /&gt;类型：整型   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="MaxAgeSeconds"/>
              <require value="true"/>
              <type value="整型"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;Bucket的CORS规则容器   &lt;br /&gt;类型：容器   &lt;br /&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CORSConfiguration"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;CORS规则的容器，每个bucket最多允许10条规则   &lt;br /&gt;类型：容器   &lt;br /&gt;父节点：CORSConfiguration&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="CORSRule"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;指定允许的跨域请求方法。   &lt;br /&gt;类型：枚举（GET,PUT,DELETE,POST,HEAD）   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="AllowedMethod"/>
                      <require value="true"/>
                      <type value="枚举（GET"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;指定允许用户从应用程序中访问的响应头（例如一个Javascript的XMLHttpRequest对象。不允许使用“*”通配符。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="ExposeHeader"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能获取CORS规则，否则返回403 Forbidden错误,错误码：AccessDenied。"/>
        </AccessDenied>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果Bucket不存在，返回404 no content错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
        <NoSuchCORSConfiguration>
          <code value="404"/>
          <describe value="如果CORS规则不存在，返回404 Not Found错误，错误码NoSuchCORSConfiguration。 "/>
        </NoSuchCORSConfiguration>
      </response>
      <summary value="获取指定的Bucket目前的CORS规则"/>
    </node>
    <node nodeName="/GetLiveChannelHistory">
      <describe value=" 本接口用来获取指定LiveChannel的推流记录。  目前最多会返回指定LiveChannel最近的10次推流记录。 "/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存GetLiveChannelHistory返回结果的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：LiveRecord&lt;br&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LiveChannelHistory"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;保存一次推流记录信息的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：StartTime，EndTime，RemoteAddr&lt;br&gt;父节点：LiveChannelHistory&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="LiveRecord"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;推流开始时间，使用ISO8601格式表示。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveRecord&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="StartTime"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;推流结束时间，使用ISO8601格式表示。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveRecord&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="EndTime"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;推流客户端的ip地址。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveRecord&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="RemoteAddr"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="GetLiveChannelHistory"/>
    </node>
    <node nodeName="/GetLiveChannelInfo">
      <describe value=" 本接口用来获取指定LiveChannel的配置信息。  Target的子节点FragDuration，FragCount，PlaylistName只有当Type取值为HLS时才会返回。 "/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存GetLiveChannelInfo返回结果的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Description、Status、Target&lt;br&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LiveChannelConfiguration"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;LiveChannel的描述信息。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannelConfiguration&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Description"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;LiveChannel的状态信息。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannelConfiguration&lt;br&gt;有效值：enabled、disabled&lt;/td&gt;"/>
                  <enum value="enabled、disabled"/>
                  <in value="formData"/>
                  <name value="Status"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存LiveChannel转储配置的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Type、FragDuration、FragCount、PlaylistName&lt;br&gt;父节点：LiveChannelConfiguration&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Target"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;当Type为HLS时，指定推流时转储文件类型。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Target&lt;br&gt;有效值：HLS&lt;/td&gt;"/>
                      <enum value="HLS"/>
                      <in value="formData"/>
                      <name value="Type"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;当Type为HLS时，指定m3u8文件中包含ts文件的个数。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Target&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="FragCount"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;当Type为HLS时，指定生成的m3u8文件的名称。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Target&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="PlaylistName"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;当Type为HLS时，指定每个ts文件的时长（单位：秒）。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点: Target&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="FragDuration"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="GetLiveChannelInfo"/>
    </node>
    <node nodeName="/GetLiveChannelStat">
      <describe value=" 本接口用来获取指定LiveChannel的推流状态信息。 &lt;ol&gt;&lt;li&gt;Video，Audio容器只有在Status为Live时才会返回，但Status为Live时不一定会返回Video，Audio容器，例如，客户端已经连接到LiveChannel，但尚未发送音视频数据时不会返回。&lt;/li&gt;&lt;li&gt;Bandwidth为音频流/视频流最近一段时间内的平均码率，LiveChannel刚切换到Live状态时，返回的Bandwidth值可能为0。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存GetLiveChannelStat返回结果的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Status，ConnectedTime，Video，Audio&lt;br&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="LiveChannelStat"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;LiveChannel当前的推流状态描述。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannelStat&lt;br&gt;有效值：Disabled，Live，Idle&lt;/td&gt;"/>
                  <enum value="Disabled，Live，Idle"/>
                  <in value="formData"/>
                  <name value="Status"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;当Status为Live时，表示当前客户端开始推流的时间，使用ISO8601格式表示。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannelStat&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="ConnnectedTime"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;当Status为Live时，表示当前推流客户端的ip地址。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannelStat&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="RemoteAddr"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;当Status为Live时，保存视频流信息的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Width，Heigth，FrameRate，Bandwidth，Codec&lt;br&gt;父节点：LiveChannelStat&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Video"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;表示当前视频流的画面宽度（单位：像素）。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Video&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Width"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;表示当前视频流的画面高度（单位：像素）。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Video&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Heigth"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;表示当前视频流的帧率。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Video&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="FrameRate"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;表示当前视频流的码率（单位：B/s)。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Video&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Bandwidth"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;表示当前视频流的编码格式。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Video&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Codec"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;当Status为Live时，保存音频流信息的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：SampleRate，Bandwidth，Codec&lt;br&gt;父节点：LiveChannelStat&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Audio"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;表示当前音频流的采样率。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Audio&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="SampleRate"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;表示当前音频流的码率（单位：B/s)。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Audio&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Bandwidth"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;表示当前音频流的编码格式。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Audio&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Codec"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="GetLiveChannelStat"/>
    </node>
    <node nodeName="/GetObject">
      <describe value=" 用于获取某个Object，此操作要求用户对该Object有读权限。  OSS支持用户在发送GET请求时，可以自定义OSS返回请求中的一些Header，前提条件是用户发送的GET请求必须携带签名。这些Header包括： &lt;ol&gt;&lt;li&gt;GetObject通过range参数可以支持断点续传，对于比较大的Object建议使用该功能。&lt;/li&gt;&lt;li&gt;如果在请求头中使用Range参数；则返回消息中会包含整个文件的长度和此次返回的范围，例如：Content-Range: bytes 0-9/44，表示整个文件长度为44，此次返回的范围为0-9。如果不符合范围规范，则传送整个文件，并且不在结果中提及Content-Range。&lt;/li&gt;&lt;li&gt;如果“If-Modified-Since”元素中设定的时间不符合规范，直接返回文件，并返回200 OK。&lt;/li&gt;&lt;li&gt;If-Modified-Since和If-Unmodified-Since可以同时存在，If-Match和If-None-Match也可以同时存在。&lt;/li&gt;&lt;li&gt;如果包含If-Unmodified-Since并且不符合或者包含If-Match并且不符合，返回412 precondition failed&lt;/li&gt;&lt;li&gt;如果包含If-Modified-Since并且不符合或者包含If-None-Match并且不符合，返回304 Not Modified&lt;/li&gt;&lt;li&gt;如果文件不存在，返回404 Not Found错误。错误码：NoSuchKey。&lt;/li&gt;&lt;li&gt;OSS不支持在匿名访问的GET请求中，通过请求参数来自定义返回请求的header。&lt;/li&gt;&lt;li&gt;在自定义OSS返回请求中的一些Header时，只有请求处理成功（即返回码为200时），OSS才会将请求的header设置成用户GET请求参数中指定的值。&lt;/li&gt;&lt;li&gt;若该Object为进行服务器端熵编码加密存储的，则在GET请求时会自动解密返回给用户，并且在响应头中，会返回x-oss-server-side-encryption，其值表明该Object的服务器端加密算法。&lt;/li&gt;&lt;li&gt;需要将返回内容进行 GZIP压缩传输的用户，需要在请求的Header中显示方式加入 Accept-Encoding:gzip，OSS会根据文件的Content-Type和文件大小，判断是否返回给用户经过GZIP 压缩的数据。如果采用了GZIP压缩则不会附带etag 信息。目前OSS支持GZIP压缩的Content-Type为HTML、Javascript、CSS、XML、RSS、Json，文件大小需不小于1k。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，返回目标文件的内容。并且， 响应头中&lt;code&gt;Content-Length&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;、&lt;code&gt;Content-Md5&lt;/code&gt; 均为目标文件的元信息；&lt;code&gt;Last-Modified&lt;/code&gt;是目标文件和符号链接的最大值；其他均为符号链接的元信息。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，并且目标文件不存在，返回404 Not Found错误。错误码：SymlinkTargetNotExist。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，并且目标文件类型是符号链接，返回400 Bad request错误。错误码：InvalidTargetType。&lt;/li&gt;&lt;li&gt;对于Archive归档类型，Object下载需要提交Restore请求，并等待Restore完成；只有在Object的Restore操作完成且超时前，Object才能被下载：&lt;br&gt;    a. 如果没有提交Restore请求，或者上一次提交Restore已经超时， 则返回403错，错误码为：InvalidObjectState。&lt;br&gt;    b. 或者已经提交Restore请求，但数据的Restore操作还没有完成， 则返回403错，错误码为：InvalidObjectState。&lt;br&gt;    c. 只有Restore完成，且没有超时，数据才能直接下载。&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设置OSS返回请求的content-type头   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="response-content-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设置OSS返回请求的content-language头   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="response-content-language"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设置OSS返回请求的expires头   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="response-expires"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设置OSS返回请求的cache-control头   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="response-cache-control"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设置OSS返回请求的content-disposition头   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="response-content-disposition"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设置OSS返回请求的content-encoding头   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="response-content-encoding"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <InvalidObjectState>
          <code value="403"/>
          <describe value="对于Archive归档类型，Object下载需要提交Restore请求，并等待Restore完成；只有在Object的Restore操作完成且超时前，Object才能被下载：    a. 如果没有提交Restore请求，或者上一次提交Restore已经超时， 则返回403错，错误码为：InvalidObjectState。    b. 或者已经提交Restore请求，但数据的Restore操作还没有完成， 则返回403错，错误码为：InvalidObjectState。    c. 只有Restore完成，且没有超时，数据才能直接下载。"/>
        </InvalidObjectState>
        <InvalidTargetType>
          <code value="400"/>
          <describe value="如果文件类型为符号链接，并且目标文件类型是符号链接，返回400 Bad request错误。错误码：InvalidTargetType。"/>
        </InvalidTargetType>
        <NoSuchKey>
          <code value="404"/>
          <describe value="如果文件不存在，返回404 Not Found错误。错误码：NoSuchKey。"/>
        </NoSuchKey>
        <SymlinkTargetNotExist>
          <code value="404"/>
          <describe value="如果文件类型为符号链接，并且目标文件不存在，返回404 Not Found错误。错误码：SymlinkTargetNotExist。"/>
        </SymlinkTargetNotExist>
      </response>
      <summary value="获取Object"/>
    </node>
    <node nodeName="/GetObjectACL">
      <describe value=" Get Object ACL用来获取某个Bucket下的某个Object的访问权限。 &lt;ol&gt;&lt;li&gt;只有Bucket的拥有者才能使用GetObjectACL这个接口来获取该Bucket下某个Object的ACL，非Bucket Owner调用该接口时，返回403 Forbidden消息。错误码：AccessDenied，提示You do not have read acl permission on this object.&lt;/li&gt;&lt;li&gt;如果从来没有对某个Object设置过ACL，则调用GetObjectACL时，OSS返回的ObjectACL会是default，表明该Object ACL遵循Bucket ACL。即：如果Bucket是private的，则该object也是private的；如果该object是public-read-write的，则该object也是public-read-write的。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Get Object ACL结果的容器  &lt;br /&gt; 类型：容器  &lt;br /&gt; 父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="AccessControlPolicy"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;存储ACL信息的容器  &lt;br /&gt; 类型：容器  &lt;br /&gt; 父节点：AccessControlPolicy&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="AccessControlList"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Object的ACL权限。 &lt;br /&gt;  类型：枚举字符串  &lt;br /&gt; 有效值：private，public-read，public-read-write   &lt;br /&gt;父节点：AccessControlPolicy.AccessControlList&lt;/td&gt;"/>
                      <enum value="private，public-read，public-read-write   "/>
                      <in value="formData"/>
                      <name value="Grant"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存Bucket拥有者信息的容器。 &lt;br /&gt;  类型：容器  &lt;br /&gt; 父节点：AccessControlPolicy&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Owner"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的名称.。(目前和ID一致) &lt;br /&gt;  类型：字符串  &lt;br /&gt; 父节点：AccessControlPolicy.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="DisplayName"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的用户ID &lt;br /&gt;  类型：字符串  &lt;br /&gt; 父节点：AccessControlPolicy.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="ID"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能使用GetObjectACL这个接口来获取该Bucket下某个Object的ACL，非Bucket Owner调用该接口时，返回403 Forbidden消息。错误码：AccessDenied，提示You do not have read acl permission on this object."/>
        </AccessDenied>
      </response>
      <summary value="获取Object ACL信息"/>
    </node>
    <node nodeName="/GetService">
      <describe value=" 对于服务地址作Get请求可以返回请求者拥有的所有Bucket，其中“/”表示根目录。  GetService(ListBucket)时，可以通过prefix，marker和max-keys对list做限定，返回部分结果。 &lt;ol&gt;&lt;li&gt;GetService这个API只对验证通过的用户有效。&lt;/li&gt;&lt;li&gt;如果请求中没有用户验证信息（即匿名访问），返回403 Forbidden。错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;当所有的bucket都返回时，返回的xml中不包含Prefix、Marker、MaxKeys、IsTruncated、NextMarker节点，如果还有部分结果未返回，则增加上述节点，其中NextMarker用于继续查询时给marker赋值。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;限定返回的bucket name必须以prefix作为前缀，可以不设定，不设定时不过滤前缀信息&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="prefix"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;设定结果从marker之后按字母排序的第一个开始返回，可以不设定，不设定时从头开始返回&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="marker"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="100"/>
          <describe value="&lt;td&gt;限定此次返回bucket的最大数，如果不设定，默认为100，max-keys取值不能大于1000&lt;br&gt;数据类型：字符串&lt;br&gt;默认值：100&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="max-keys"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Get   Service请求结果的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点:   Owner, Buckets&lt;br&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ListAllMyBucketsResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;本次查询结果的前缀，当bucket未全部返回时才有此节点&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Prefix"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;标明这次GetService(ListBucket)的起点，当bucket未全部返回时才有此节点&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Marker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;响应请求内返回结果的最大数目，当bucket未全部返回时才有此节点&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="MaxKeys"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;指明是否所有的结果都已经返回：“true”表示本次没有返回全部结果；“false”表示本次已经返回了全部结果。当bucket未全部返回时才有此节点。&lt;br&gt;类型：枚举字符串&lt;br&gt;有效值：true、false&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <enum value="true、false"/>
                  <in value="formData"/>
                  <name value="IsTruncated"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;表示下一次GetService(ListBucket)可以以此为marker，将未返回的结果返回。当bucket未全部返回时才有此节点。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="NextMarker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;用于存放Bucket拥有者信息的容器。&lt;br&gt;类型：容器&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Owner"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的用户ID。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="ID"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Bucket拥有者的名称 (目前和ID一致)。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Owner&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="DisplayName"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存多个Bucket信息的容器。&lt;br&gt;类型：容器 &lt;br&gt;子节点：Bucket&lt;br&gt;父节点：ListAllMyBucketsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Buckets"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;保存bucket信息的容器. &lt;br&gt;类型：容器&lt;br&gt;子节点：Name,   CreationDate, Location&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Bucket"/>
                      <require value="true"/>
                      <schema nodeType="array">
                        <schema>
                          <describe value="&lt;td&gt;Bucket名称。&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets.Bucket&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="Name"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                        <schema>
                          <describe value="&lt;td&gt;Bucket创建时间&lt;br&gt;类型：时间 (格式：yyyy-mm-ddThh:mm:ss.timezone,   e.g.,   2011-12-01T12:27:13.000Z)&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets.Bucket&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="CreateDate"/>
                          <require value="true"/>
                          <type value="date-time"/>
                        </schema>
                        <schema>
                          <describe value="&lt;td&gt;Bucket所在的数据中心&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets.Bucket&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="Location"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                        <schema>
                          <describe value="&lt;td&gt;Bucket访问的外网域名 &lt;br&gt; 类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets.Bucket&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="ExtranetEndpoint"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                        <schema>
                          <describe value="&lt;td&gt;同区域ECS访问Bucket的内网域名&lt;br&gt; 类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets.Bucket&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="IntranetEndpoint"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                        <schema>
                          <describe value="&lt;td&gt;Bucket存储类型，支持“Standard”、“IA”、“Archive”。（目前只有部分区域支持“Archive”类型）&lt;br&gt;类型：字符串&lt;br&gt;父节点：ListAllMyBucketsResult.Buckets.Bucket&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="StorageClass"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                      </schema>
                      <type value="Object"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="如果请求中没有用户验证信息（即匿名访问），返回403 Forbidden。错误码：AccessDenied。"/>
        </AccessDenied>
      </response>
      <summary value="得到该账户下所有Bucket"/>
    </node>
    <node nodeName="/HeadObject">
      <describe value=" Head Object只返回某个Object的meta信息，不返回文件内容。 &lt;ol&gt;&lt;li&gt;不论正常返回200 OK还是非正常返回，Head Object都不返回消息体。&lt;/li&gt;&lt;li&gt;HeadObject支持在头中设定If-Modified-Since, If-Unmodified-Since, If-Match，If-None-Match的查询条件。具体规则请参见GetObject中对应的选项。如果没有修改，返回304 Not Modified。&lt;/li&gt;&lt;li&gt;如果用户在PutObject的时候传入以x-oss-meta-为开头的user meta，比如x-oss-meta-location，返回消息时，返回这些user meta。&lt;/li&gt;&lt;li&gt;如果文件不存在返回404 Not Found错误。&lt;/li&gt;&lt;li&gt;若该Object为进行服务器端熵编码加密存储的，则在Head请求响应头中，会返回x-oss-server-side-encryption，其值表明该Object的服务器端加密算法。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;， 响应头中&lt;code&gt;Content-Length&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;、&lt;code&gt;Content-Md5&lt;/code&gt; 均为目标文件的元信息；&lt;code&gt;Last-Modified&lt;/code&gt;是目标文件和符号链接的最大值；其他均为符号链接元信息。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，并且目标文件不存在，返回404 Not Found错误。错误码：SymlinkTargetNotExist。&lt;/li&gt;&lt;li&gt;如果文件类型为&lt;strong&gt;符号链接&lt;/strong&gt;，并且目标文件类型是符号链接，返回400 Bad request错误。错误码：InvalidTargetType。&lt;/li&gt;&lt;li&gt;如果Bucket类型为Archive，响应头中以x-oss-storage-class展示Object的存储类型。&lt;/li&gt;&lt;li&gt;如果Bucket类型为Archive，且用户已经提交Restore请求，则响应头中会以x-oss-restore返回该Object的Restore状态，分如下几种情况：&lt;br&gt;    a. 如果没有提交Restore或者Restore已经超时，则不返回该字段。&lt;br&gt;    b. 如果已经提交Restore，且Restore没有时完成，则返回的x-oss-restore值为: ongoing-request=”true”。&lt;br&gt;    c. 如果已经提交Restore，且Restore已经完成，则返回的x-oss-restore值为: ongoing-request=”false”, expiry-date=”Sun, 16 Apr 2017 08:12:33 GMT”。&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <InvalidTargetType>
          <code value="400"/>
          <describe value="如果文件类型为符号链接，并且目标文件类型是符号链接，返回400 Bad request错误。错误码：InvalidTargetType。"/>
        </InvalidTargetType>
        <SymlinkTargetNotExist>
          <code value="404"/>
          <describe value="如果文件类型为符号链接，并且目标文件不存在，返回404 Not Found错误。错误码：SymlinkTargetNotExist。"/>
        </SymlinkTargetNotExist>
      </response>
      <summary value="获得Object的meta信息"/>
    </node>
    <node nodeName="/InitiateMultipartUploade">
      <describe value=" 使用Multipart Upload模式传输数据前，必须先调用该接口来通知OSS初始化一个Multipart Upload事件。该接口会返回一个OSS服务器创建的全局唯一的Upload ID，用于标识本次Multipart Upload事件。用户可以根据这个ID来发起相关的操作，如中止Multipart Upload、查询Multipart Upload等。  Initiate Multipart Upload时，可以通过encoding-type对返回结果中的Key进行编码。 &lt;ol&gt;&lt;li&gt;该操作计算认证签名的时候，需要加“?uploads”到CanonicalizedResource中。&lt;/li&gt;&lt;li&gt;初始化Multipart Upload请求，支持如下标准的HTTP请求头：Cache-Control，Content- Disposition，Content-Encoding，Content-Type，Expires，以及以“x-oss-meta-”开头的用户自定义Headers。具体含义请参见PUT Object接口。&lt;/li&gt;&lt;li&gt;初始化Multipart Upload请求，并不会影响已经存在的同名object。&lt;/li&gt;&lt;li&gt;服务器收到初始化Multipart Upload请求后，会返回一个XML格式的请求体。该请求体内有三个元素：Bucket，Key和UploadID。请记录下其中的UploadID，以用于后续的Multipart相关操作。&lt;/li&gt;&lt;li&gt;初始化Multipart Upload请求时，若设置了x-oss-server-side-encryption Header，则在响应头中会返回该Header，并且在上传的每个part时，服务端会自动对每个part进行熵编码加密存储，目前OSS服务器端只支持256位高级加密标准（AES256），指定其他值会返回400和相应的错误提示：InvalidEncryptionAlgorithmError；在上传每个part时不必再添加x-oss-server-side-encryption 请求头，若指定该请求头则OSS会返回400和相应的错误提示：InvalidArgument。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定对返回的Key进行编码，目前支持url编码。Key使用UTF-8字符，但xml 1.0标准不支持解析一些控制字符，比如ascii值从0到10的字符。对于Key中包含xml 1.0标准不支持的控制字符，可以通过指定encoding-type对返回的Key进行编码。&lt;br /&gt;数据类型：字符串&lt;br /&gt;默认值：无,可选值：url&lt;/td&gt;"/>
          <enum value="url"/>
          <in value="quary"/>
          <name value="encoding-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的网页的缓存行为；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Cache-Control"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的名称；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-Disposition"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的内容编码格式；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-Encoding"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;过期时间（milliseconds）；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：整数   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Expires"/>
          <require value="true"/>
          <type value="integer"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定上传该Object每个part时使用的服务器端加密编码算法，OSS会对上传的每个part采用服务器端加密编码进行存储。   &lt;br /&gt;类型：字符串   &lt;br /&gt;合法值：AES256&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-server-side-encryption"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存Initiate   Multipart Upload请求结果的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：Bucket,   Key, UploadId   &lt;br /&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="InitiateMultipartUploadResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;初始化一个Multipart   Upload事件的Bucket名称。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：InitiateMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Bucket"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;初始化一个Multipart   Upload事件的Object名称。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：InitiateMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Key"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;唯一标示此次Multipart   Upload事件的ID。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：InitiateMultipartUploadResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="UploadId"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="初始化MultipartUpload事件"/>
    </node>
    <node nodeName="/ListLiveChannel">
      <describe value=""/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;设定结果从marker之后按字母排序的第一个开始返回。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="marker"/>
          <require value="false"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;限定此次返回LiveChannel的最大数，如果不设定，默认为100，max-keys取值不能大于1000。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="max-keys"/>
          <require value="false"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;限定返回的LiveChannel必须以prefix作为前缀。注意使用prefix查询时，返回的key中仍会包含prefix。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="prefix"/>
          <require value="false"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存ListLiveChannel请求结果的容器。&lt;br&gt;类型：容器&lt;br&gt;字节点：Prefix，Marker，MaxKeys，IsTruncated，NextMarker，LiveChannel&lt;br&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ListLiveChannelResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;本次查询结果的开始前缀。 &lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：ListLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Prefix"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;本次ListLiveChannel的起点。 &lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：ListLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Marker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;响应请求内返回结果的最大数目。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：ListLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="MaxKeys"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;指明是否所有的结果都已经返回； “true”表示本次没有返回全部结果；“false”表示本次已经返回了全部结果。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：ListLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="IsTruncated"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;如果本次没有返回全部结果，响应请求中将包含NextMarker元素，用于标明接下来请求的Marker值。 &lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：ListLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="NextMarker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存返回每个LiveChannel信息的容器。 &lt;br&gt;类型：容器&lt;br&gt;子节点：Name，Description，Status，LastModified，PublishUrls，PlayUrls&lt;br&gt;父节点：ListLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="LiveChannel"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;LiveChannel的名称。 &lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannel&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Name"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;LiveChannel的描述。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannel&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Description"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;LiveChannel的状态。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannel&lt;br&gt;有效值：disabled，enabled&lt;/td&gt;"/>
                      <enum value="disabled，enabled"/>
                      <in value="formData"/>
                      <name value="Status"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;LiveChannel配置的最后修改时间，使用ISO8601格式表示。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannel&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="LastModified"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;保存LiveChannel对应的推流地址的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Url&lt;br&gt;父节点：LiveChannel&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="PublishUrls"/>
                      <require value="true"/>
                      <schema nodeType="array">
                        <schema>
                          <describe value="&lt;td&gt;LiveChannel对应的推流地址。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：PublishUrls&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="Url"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                      </schema>
                      <type value="Object"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;保存LiveChannel对应的播放地址的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Url&lt;br&gt;父节点：LiveChannel&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="PlayUrls"/>
                      <require value="true"/>
                      <schema nodeType="array">
                        <schema>
                          <describe value="&lt;td&gt;LiveChannel对应的播放地址。 &lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：PlayUrls&lt;/td&gt;"/>
                          <in value="formData"/>
                          <name value="Url"/>
                          <require value="true"/>
                          <type value="string"/>
                        </schema>
                      </schema>
                      <type value="Object"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="ListLiveChannel"/>
    </node>
    <node nodeName="/ListMultipartUploads">
      <describe value=" List Multipart Uploads可以罗列出所有执行中的Multipart Upload事件，即已经被初始化的Multipart Upload但是未被Complete或者Abort的Multipart  Upload事件。OSS返回的罗列结果中最多会包含1000个Multipart Upload信息。如果想指定OSS返回罗列结果内Multipart Upload信息的数目，可以在请求中添加max-uploads参数。另外，OSS返回罗列结果中的IsTruncated元素标明是否还有其他的Multipart Upload。 &lt;ol&gt;&lt;li&gt;“max-uploads”参数最大值为1000。&lt;/li&gt;&lt;li&gt;在OSS的返回结果首先按照Object名字字典序升序排列；对于同一个Object，则按照时间序，升序排列。&lt;/li&gt;&lt;li&gt;可以灵活地使用prefix参数对bucket内的object进行分组管理（类似与文件夹的功能）。&lt;/li&gt;&lt;li&gt;List Multipart Uploads请求支持5种请求参数： prefix，marker，delimiter，upload-id-marker和max-uploads。通过这些参数的组合，可以设定查询Multipart Uploads事件的规则，获得期望的查询结果。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;是一个用于对Object名字进行分组的字符。所有名字包含指定的前缀且第一次出现delimiter字符之间的object作为一组元素——CommonPrefixes。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="delimiter"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;限定此次返回Multipart   Uploads事件的最大数目，如果不设定，默认为1000，max-uploads取值不能大于1000。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="max-uploads"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;与upload-id-marker参数一同使用来指定返回结果的起始位置。   l    如果upload-id-marker参数未设置，查询结果中包含：所有Object名字的字典序大于key-marker参数值的Multipart事件。   l    如果upload-id-marker参数被设置，查询结果中包含：所有Object名字的字典序大于key-marker参数值的Multipart事件和Object名字等于key-marker参数值，但是Upload   ID比upload-id-marker参数值大的Multipart   Uploads事件。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="key-marker"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;限定返回的object   key必须以prefix作为前缀。注意使用prefix查询时，返回的key中仍会包含prefix。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="prefix"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;与key-marker参数一同使用来指定返回结果的起始位置。   l    如果key-marker参数未设置，则OSS忽略upload-id-marker参数。   l    如果key-marker参数被设置，查询结果中包含：所有Object名字的字典序大于key-marker参数值的Multipart事件和Object名字等于key-marker参数值，但是Upload   ID比upload-id-marker参数值大的Multipart   Uploads事件。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="upload-id-marker"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定对返回的内容进行编码，指定编码的类型。Delimiter、KeyMarker、Prefix、NextKeyMarker和Key使用UTF-8字符，但xml 1.0标准不支持解析一些控制字符，比如ascii值从0到10的字符。对于包含xml 1.0标准不支持的控制字符，可以通过指定encoding-type对返回的Delimiter、KeyMarker、Prefix、NextKeyMarker和Key进行编码。&lt;br /&gt;数据类型：字符串&lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="encoding-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存List   Multipart Upload请求结果的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：Bucket, KeyMarker, UploadIdMarker, NextKeyMarker,   NextUploadIdMarker, MasUploads, Delimiter, Prefix, CommonPrefixes,   IsTruncated, Upload   &lt;br /&gt;父节点：None&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ListMultipartUploadsResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;Bucket名称。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Bucket"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;指明返回结果中编码使用的类型。如果请求的参数中指定了encoding-type，那返回的结果会对Delimiter、KeyMarker、Prefix、NextKeyMarker和Key这些元素进行编码。&lt;br /&gt;类型：字符串&lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="EncodingType"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;列表的起始Object位置。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="KeyMarker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;列表的起始UploadID位置。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="UploadIdMarker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;如果本次没有返回全部结果，响应请求中将包含NextKeyMarker元素，用于标明接下来请求的KeyMarker值。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="NextKeyMarker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;如果本次没有返回全部结果，响应请求中将包含NextUploadMarker元素，用于标明接下来请求的UploadMarker值。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="NextUploadMarker"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;返回的最大Upload数目。   &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="MaxUploads"/>
                  <require value="true"/>
                  <type value="integer"/>
                </schema>
                <schema>
                  <default value="false   "/>
                  <describe value="&lt;td&gt;标明是否本次返回的Multipart   Upload结果列表被截断。“true”表示本次没有返回全部结果；“false”表示本次已经返回了全部结果。   &lt;br /&gt;类型：枚举字符串   有效值：false、true   &lt;br /&gt;默认值：false   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <enum value="false、true   "/>
                  <in value="formData"/>
                  <name value="IsTruncated"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存Multipart   Upload事件信息的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：Key, UploadId, Initiated   &lt;br /&gt;父节点：ListMultipartUploadsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Upload"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;初始化Multipart   Upload事件的Object名字。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：Upload&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Key"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Multipart   Upload事件的ID。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：Upload&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="UploadId"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;Multipart   Upload事件初始化的时间.   &lt;br /&gt;类型：日期   &lt;br /&gt;父节点：Upload&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Initiated"/>
                      <require value="true"/>
                      <type value="日期"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="罗列出所有执行中的Multipart Upload事件"/>
    </node>
    <node nodeName="/ListParts">
      <describe value=" List Parts命令可以罗列出指定Upload ID所属的所有已经上传成功Part。 &lt;ol&gt;&lt;li&gt;List Parts支持max-parts和part-number-marker两种请求参数。&lt;/li&gt;&lt;li&gt;max-parts参数最大值为1000；默认值也为1000。&lt;/li&gt;&lt;li&gt;在OSS的返回结果按照Part号码升序排列。&lt;/li&gt;&lt;li&gt;由于网络传输可能出错，所以不推荐用List Part出来的结果（Part Number和ETag值）来生成最后Complete Multipart的Part列表。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;Multipart   Upload事件的ID。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="uploadId"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="1"/>
          <describe value="&lt;td&gt;规定在OSS响应中的最大Part数目。   &lt;br /&gt;类型：整数   &lt;br /&gt;默认值：1,000&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="max-parts"/>
          <require value="true"/>
          <type value="integer"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定List的起始位置，只有Part   Number数目大于该参数的Part会被列出。   &lt;br /&gt;类型：整数   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="part-number-marker"/>
          <require value="true"/>
          <type value="integer"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定对返回的内容进行编码，指定编码的类型。Key使用UTF-8字符，但xml 1.0标准不支持解析一些控制字符，比如ascii值从0到10的字符。对于Key中包含xml 1.0标准不支持的控制字符，可以通过指定encoding-type对返回的Key进行编码。&lt;br /&gt;数据类型：字符串&lt;br /&gt;默认值：无，可选值：url&lt;/td&gt;"/>
          <enum value="url"/>
          <in value="quary"/>
          <name value="encoding-type"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存List   Part请求结果的容器。   &lt;br /&gt;类型：容器   &lt;br /&gt;子节点：Bucket, Key, UploadId, PartNumberMarker, NextPartNumberMarker,   MaxParts, IsTruncated, Part   &lt;br /&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="ListPartsResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;Bucket名称。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Bucket"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;指明对返回结果进行编码使用的类型。如果请求的参数中指定了encoding-type，那会对返回结果中的Key进行编码。&lt;br /&gt;类型：字符串&lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="EncodingType"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;Object名称。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Key"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;Upload事件ID。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="UploadId"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;本次List结果的Part   Number起始位置。   &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="PartNumberMarker"/>
                  <require value="true"/>
                  <type value="integer"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;如果本次没有返回全部结果，响应请求中将包含NextPartNumberMarker元素，用于标明接下来请求的PartNumberMarker值。 &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="NextPartNumberMarker"/>
                  <require value="true"/>
                  <type value="integer"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;返回请求中最大的Part数目。   &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="MaxParts"/>
                  <require value="true"/>
                  <type value="integer"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;标明是否本次返回的List   Part结果列表被截断。“true”表示本次没有返回全部结果；“false”表示本次已经返回了全部结果。   &lt;br /&gt;类型：枚举字符串   有效值：true、false   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <enum value="true、false   "/>
                  <in value="formData"/>
                  <name value="IsTruncated"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存Part信息的容器。   &lt;br /&gt;类型：字符串   &lt;br /&gt;子节点：PartNumber,LastModified, ETag, Size   &lt;br /&gt;父节点：ListPartsResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Part"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;标示Part的数字。   &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：ListPartsResult.Part&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="PartNumber"/>
                      <require value="true"/>
                      <type value="integer"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;已上传Part内容的ETag。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：ListPartsResult.Part&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="ETag"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                    <schema>
                      <describe value="&lt;td&gt;已上传Part大小。   &lt;br /&gt;类型：整数   &lt;br /&gt;父节点：ListPartsResult.Part&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Size"/>
                      <require value="true"/>
                      <type value="integer"/>
                    </schema>
                  </schema>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="罗列出指定Upload ID所属的所有已经上传成功Part"/>
    </node>
    <node nodeName="/OptionObject">
      <describe value=" 浏览器在发送跨域请求之前会发送一个preflight请求（OPTIONS）并带上特定的来源域，HTTP方法和header信息等给OSS以决定是否发送真正的请求。OSS可以通过Put Bucket cors接口来开启Bucket的CORS支持，开启CORS功能之后，OSS在收到浏览器preflight请求时会根据设定的规则评估是否允许本次请求。如果不允许或者CORS功能没有开启，返回403 Forbidden。 "/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;请求来源域，用来标示跨域请求。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Origin"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;表示在实际请求中将会用到的方法。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Access-Control-Request-Method"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;表示在实际请求中会用到的除了简单头部之外的headers。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Access-Control-Request-Headers"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;请求中包含的Origin，如果不允许的话将不包含该头部。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
              <in value="header"/>
              <name value="Access-Control-Allow-Origin"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;允许请求的HTTP方法，如果不允许该请求，则不包含该头部。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
              <in value="header"/>
              <name value="Access-Control-Allow-Methods"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;允许请求携带的header的列表，如果请求中有不被允许的header，则不包含该头部，请求也将被拒绝。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
              <in value="header"/>
              <name value="Access-Control-Allow-Headers"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;允许在客户端JavaScript程序中访问的headers的列表。   &lt;br /&gt;类型：字符串&lt;/td&gt;"/>
              <in value="header"/>
              <name value="Access-Control-Expose-Headers"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <describe value="&lt;td&gt;允许浏览器缓存preflight结果的时间，单位为秒   &lt;br /&gt;类型：整型&lt;/td&gt;"/>
              <in value="header"/>
              <name value="Access-Control-Max-Age"/>
              <require value="true"/>
              <type value="整型"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="跨域访问preflight请求"/>
    </node>
    <node nodeName="/PostObject">
      <describe value=" Post Object使用HTML表单上传文件到指定bucket。Post作为Put的替代品，使得基于浏览器上传文件到bucket成为可能。Post Object的消息实体通过多重表单格式（multipart/form-data）编码，在Put Object操作中参数通过HTTP请求头传递，在Post操作中参数则作为消息实体中的表单域传递。  Post请求的policy表单域用于验证请求的合法性。 policy为一段经过UTF-8和base64编码的JSON文本，声明了Post请求必须满足的条件。虽然对于public-read-write的bucket上传时，post表单域为可选项，我们强烈建议使用该域来限制Post请求。  Post policy中必须包含expiration和condtions。  Expiration项指定了policy的过期时间，以ISO8601  GMT时间表示。例如”2014-12-01T12:00:00.000Z”指定了Post请求必须发生在2014年12月1日12点之前。  Conditions是一个列表，可以用于指定Post请求的表单域的合法值。注意：表单域对应的值在检查policy之后进行扩展，因此，policy中设置的表单域的合法值应当对应于扩展之前的表单域的值。例如，如果设置key表单域为user/user1/${filename}，用户的文件名为a.txt，则Post policy应当设置成[“eq”, “$key”, “user/user1/\${filename}”]，而不是[“eq”, “$key”，“$key”, “user/user1/a.txt”]。Policy中支持的conditions项见下表：  如果Post请求中包含其他的表单域，可以将这些额外的表单域加入到policy的conditions中,conditions不涉及的表单域将不会进行合法性检查。  于在 Post policy 中 $ 表示变量，所以如果要描述 $，需要使用转义字符\$。除此之外，JSON 将对一些字符进行转义。下图描述了 Post policy 的 JSON 中需要进行转义的字符。  对于验证的Post请求，HTML表单中必须包含policy和Signature信息。policy控制请求中那些值是允许的。计算Signature的具体流程为： &lt;ol&gt;&lt;li&gt;进行Post操作要求对bucket有写权限，如果bucket为public-read-write，可以不上传签名信息，否则要求对该操作进行签名验证。与Put操作不同，Post操作使用AccessKeySecret对policy进行签名计算出签名字符串作为Signature表单域的值，OSS会验证该值从而判断签名的合法性。&lt;/li&gt;&lt;li&gt;无论bucket是否为public-read-write，一旦上传OSSAccessKeyId, policy, Signature表单域中的任意一个，则另两个表单域为必选项，缺失时OSS会返回错误码：InvalidArgument。&lt;/li&gt;&lt;li&gt;post操作提交表单编码必须为“multipart/form-data”，即header中Content-Type为&lt;code&gt;multipart/form-data; boundary=xxxxxx&lt;/code&gt;这样的形式，boundary为边界字符串。&lt;/li&gt;&lt;li&gt;提交表单的URL为bucket域名即可，不需要在URL中指定object。即请求行是&lt;code&gt;POST / HTTP/1.1&lt;/code&gt;，不能写成&lt;code&gt;POST /ObjectName HTTP/1.1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;policy规定了该次Post请求中表单域的合法值，OSS会根据policy判断请求的合法性，如果不合法会返回错误码：AccessDenied。在检查policy合法性时，policy中不涉及的表单域不进行检查。&lt;/li&gt;&lt;li&gt;表单和policy必须使用UTF-8编码，policy为经过UTF-8编码和base64编码的JSON。&lt;/li&gt;&lt;li&gt;Post请求中可以包含额外的表单域，OSS会根据policy对这些表单域检查合法性。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;li&gt;如果POST请求中包含Header签名信息或URL签名信息，OSS不会对它们做检查。&lt;/li&gt;&lt;li&gt;如果请求中携带以x-oss-meta-为前缀的表单域，则视为user meta，比如x-oss-meta-location。一个Object可以有多个类似的参数，但所有的user meta总大小不能超过8k。&lt;/li&gt;&lt;li&gt;Post请求的body总长度不允许超过5G。若文件长度过大，会返回错误码：EntityTooLarge。&lt;/li&gt;&lt;li&gt;如果上传指定了x-oss-server-side-encryption Header请求域，则必须设置其值为AES256，否则会返回400和错误码：InvalidEncryptionAlgorithmError。指定该Header后，在响应头中也会返回该Header，OSS会对上传的Object进行加密编码存储，当这个Object被下载时，响应头中会包含x-oss-server-side-encryption，值被设置成该Object的加密算法。&lt;/li&gt;&lt;li&gt;表单域为大小写不敏感的，但是表单域的值为大小写敏感的。&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;创建一个 UTF-8 编码的 policy。&lt;/li&gt;&lt;li&gt;将 policy 进行 base64 编码，其值即为 policy 表单域该填入的值，将该值作为将要签名的字符串。&lt;/li&gt;&lt;li&gt;使用 AccessKeySecret 对要签名的字符串进行签名，签名方法与Head中签名的计算方法相同（将要签名的字符串替换为 policy 即可）。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None   "/>
          <describe value="&lt;td&gt;Bucket   拥有者的Access   Key Id。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无   &lt;br&gt;限制：当bucket非public-read-write或者提供了policy（或Signature）表单域时，必须提供该表单域。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="OSSAccessKeyId"/>
          <require value="有条件的"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None   "/>
          <describe value="&lt;td&gt;policy规定了请求的表单域的合法性。不包含policy表单域的请求被认为是匿名请求，并且只能访问public-read-write的bucket。更详细描述请参考下文 Post Policy。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无   &lt;br&gt;限制：当bucket非public-read-write或者提供了OSSAccessKeyId（或Signature）表单域时，必须提供该表单域。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="policy"/>
          <require value="有条件的"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None   "/>
          <describe value="&lt;td&gt;根据Access   Key Secret和policy计算的签名信息，OSS验证该签名信息从而验证该Post请求的合法性。更详细描述请参考下文 Post Signature。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无   &lt;br&gt;限制：当bucket非public-read-write或者提供了OSSAccessKeyId（或policy）表单域时，必须提供该表单域。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Signature"/>
          <require value="有条件的"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;REST请求头，更多的信息见Put   Object。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Cache-Control,      Content-Type,      Content-Disposition,   Content-Encoding,   Expires"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;文件或文本内容，必须是表单中的最后一个域。浏览器会自动根据文件类型来设置Content-Type，会覆盖用户的设置。   OSS一次只能上传一个文件。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="file"/>
          <require value="必须"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;上传文件的object名称。   如果需要使用用户上传的文件名称作为object名，使用${filename}变量。例如：如果用户上传了文件b.jpg，而key域的值设置为/user/a/${filename}，最终的object名为/user/a/b.jpg。   如果文件名包含路径，则去除文件名中的路径，例如用户上传了文件a/b/c/b.jpg，则取文件名为b.jpg，若key域的值设置为/user/a/${filename}，最终的object名为/user/a/b.jpg   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="key"/>
          <require value="必须"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;上传成功后客户端跳转到的URL，如果未指定该表单域，返回结果由success_action_status表单域指定。如果上传失败，OSS返回错误码，并不进行跳转。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="success_action_redirect"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;未指定success_action_redirect表单域时，该表单域指定了上传成功后返回给客户端的状态码。   接受值为200,   201, 204（默认）。   如果该域的值为200或者204，OSS返回一个空文档和相应的状态码。   如果该域的值设置为201，OSS返回一个XML文件和201状态码。   如果其值未设置或者设置成一个非法值，OSS返回一个空文档和204状态码。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="success_action_status"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;用户指定的user   meta值。   OSS不会检查或者使用该值。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-meta-*"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定OSS创建object时的服务器端加密编码算法。   &lt;br&gt;类型：字符串   &lt;br&gt;合法值：AES256&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-server-side-encryption"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定oss创建object时的访问权限。   &lt;br&gt;类型：字符串   &lt;br&gt;合法值：public-read，private，public-read-write&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-object-acl"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;若本次访问是使用STS临时授权方式，则需要指定该项为SecurityToken的值，同时OSSAccessKeyId需要使用与之配对的临时AccessKeyId，计算签名时，与使用普通AccessKeyId签名方式一致。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-security-token"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;上传文件的最小和最大允许大小。   该condition支持contion-length-range匹配方式。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="content-length-range"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;HTTP请求头。   该condition支持精确匹配和starts-with匹配方式。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Cache-Control,   Content-Type,   Content-Disposition,   Content-Encoding,   Expires"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;上传文件的object名称。   该condition支持精确匹配和starts-with匹配方式。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="key"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;上传成功后的跳转URL地址。   该condition支持精确匹配和starts-with匹配方式。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="success_action_redirect"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;未指定success_action_redirect时，上传成功后的返回状态码。   该condition支持精确匹配和starts-with匹配方式。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="success_action_status"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;用户指定的user   meta。   该condition支持精确匹配和starts-with匹配方式。&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-meta-*"/>
          <require value="true"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <describe value="policy规定了该次Post请求中表单域的合法值，OSS会根据policy判断请求的合法性，如果不合法会返回错误码：AccessDenied。在检查policy合法性时，policy中不涉及的表单域不进行检查。"/>
        </AccessDenied>
        <EntityTooLarge>
          <describe value="Post请求的body总长度不允许超过5G。若文件长度过大，会返回错误码：EntityTooLarge。"/>
        </EntityTooLarge>
        <InvalidArgument>
          <describe value="无论bucket是否为public-read-write，一旦上传OSSAccessKeyId, policy, Signature表单域中的任意一个，则另两个表单域为必选项，缺失时OSS会返回错误码：InvalidArgument。"/>
        </InvalidArgument>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
        <InvalidEncryptionAlgorithmError>
          <code value="256"/>
          <describe value="如果上传指定了x-oss-server-side-encryption Header请求域，则必须设置其值为AES256，否则会返回400和错误码：InvalidEncryptionAlgorithmError。指定该Header后，在响应头中也会返回该Header，OSS会对上传的Object进行加密编码存储，当这个Object被下载时，响应头中会包含x-oss-server-side-encryption，值被设置成该Object的加密算法。"/>
        </InvalidEncryptionAlgorithmError>
      </response>
      <summary value="使用Post上传Object"/>
    </node>
    <node nodeName="/PostVodPlaylist">
      <describe value=" 本接口用来为指定LiveChannel推流生成的，指定时间段内的ts文件生成一个点播用的播放列表（m3u8文件）。 &lt;ol&gt;&lt;li&gt;EndTime必须大于StartTime，且时间跨度不能大于1天。&lt;/li&gt;&lt;li&gt;OSS会查询指定时间范围内的所有该LiveChannel推流生成的ts文件，并将其拼装为一个播放列表。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;指定LiveChannel名称，该LiveChannel必须存在。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="ChannelName"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定生成的点播播放列表的名称，必须以“.m3u8”结尾。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="PlaylistName"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定查询ts文件的起始时间，格式为Unix timestamp。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="StartTime"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定查询ts文件的终止时间，格式为Unix timestamp。&lt;/td&gt;"/>
          <in value="quary"/>
          <name value="EndTime"/>
          <require value="true"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
      </response>
      <summary value="PostVodPlaylist"/>
    </node>
    <node nodeName="/PutBucket">
      <describe value=" PutBucket用于创建Bucket（不支持匿名访问）。创建的Bucket所在的Region和发送请求的Endpoint所对应的Region一致。Bucket所在的数据中心确定后，该Bucket下的所有Object将一直存放在对应的地区。更多内容参见  Bucket和数据中心  。 &lt;ol&gt;&lt;li&gt;可以Put请求中的 &lt;code&gt;x-oss-acl&lt;/code&gt; 头来设置Bucket访问权限。目前Bucket有三种访问权限：public-read-write，public-read和private。&lt;/li&gt;&lt;li&gt;如果请求的Bucket已经存在，并且请求者是所有者，返回200 OK成功。&lt;/li&gt;&lt;li&gt;如果请求的Bucket已经存在，但是不是请求者所拥有的，返回409 Conflict。错误码：BucketAlreadyExists。&lt;/li&gt;&lt;li&gt;如果想创建的Bucket不符合命名规范，返回400 Bad Request消息。错误码：InvalidBucketName。&lt;/li&gt;&lt;li&gt;如果用户发起PUT Bucket请求的时候，没有传入用户验证信息，返回403 Forbidden消息。错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果PutBucket的时候发现已经超过bucket最大创建数时，&lt;strong&gt;默认30个&lt;/strong&gt;，返回400 Bad Request消息。错误码：TooManyBuckets。&lt;/li&gt;&lt;li&gt;创建的Bucket，如果没有指定访问权限，则默认使用 &lt;code&gt;Private&lt;/code&gt; 权限。&lt;/li&gt;&lt;li&gt;创建的Bucket，可以指定Bucket的存储类型，可选值为Standard和IA、Archive。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="如果用户发起PUT Bucket请求的时候，没有传入用户验证信息，返回403 Forbidden消息。错误码：AccessDenied。"/>
        </AccessDenied>
        <BucketAlreadyExists>
          <code value="409"/>
          <describe value="如果请求的Bucket已经存在，但是不是请求者所拥有的，返回409 Conflict。错误码：BucketAlreadyExists。"/>
        </BucketAlreadyExists>
        <InvalidBucketName>
          <code value="400"/>
          <describe value="如果想创建的Bucket不符合命名规范，返回400 Bad Request消息。错误码：InvalidBucketName。"/>
        </InvalidBucketName>
        <TooManyBuckets>
          <code value="400"/>
          <describe value="如果PutBucket的时候发现已经超过bucket最大创建数时，默认30个，返回400 Bad Request消息。错误码：TooManyBuckets。"/>
        </TooManyBuckets>
      </response>
      <summary value="创建Bucket"/>
    </node>
    <node nodeName="/PutBucketACL">
      <describe value=" Put Bucket ACL接口用于修改Bucket访问权限。目前Bucket有三种访问权限：public-read-write，public-read和private。Put Bucket ACL操作通过Put请求中的“x-oss-acl”头来设置。这个操作只有该Bucket的创建者有权限执行。如果操作成功，则返回200；否则返回相应的错误码和提示信息。  如果该设置的权限不存在，示例400 Bad Request消息： &lt;ol&gt;&lt;li&gt;如果bucket存在，发送时带的权限和已有权限不一样，并且请求发送者是bucket拥有者时。该请求不会改变bucket内容，但是会更新权限。&lt;/li&gt;&lt;li&gt;如果用户发起Put Bucket请求的时候，没有传入用户验证信息，返回403 Forbidden消息。错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果请求中没有，“x-oss-acl”头，并且该bucket已存在，并属于该请求发起者，则维持原bucket权限不变。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="如果用户发起Put Bucket请求的时候，没有传入用户验证信息，返回403 Forbidden消息。错误码：AccessDenied。"/>
        </AccessDenied>
      </response>
      <summary value="设置Bucket访问权限"/>
    </node>
    <node nodeName="/PutBucketLifecycle">
      <describe value=" Bucket的拥有者可以通过Put Bucket Lifecycle来设置Bucket的Lifecycle配置。Lifecycle开启后，OSS将按照配置，定期自动删除与Lifecycle规则相匹配的Object。 &lt;ol&gt;&lt;li&gt;只有Bucket的拥有者才能发起Put Bucket Lifecycle请求，否则返回403 Forbidden消息。错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果此前没有设置过Lifecycle，此操作会创建一个新的Lifecycle配置；否则，就覆写先前的配置。&lt;/li&gt;&lt;li&gt;可以对Object设置过期时间，也可以对Part设置过期时间。这里的Part指的是以分片上传方式上传，但最后未提交的分片。&lt;h2 id=&quot;h2-u793Au4F8B&quot;&gt;&lt;a name=&quot;示例&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;&gt;&lt;/span&gt;示例&lt;/h2&gt;&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;指定规则在对象最后修改时间过后多少天生效。 &lt;br&gt;类型：正整数 &lt;br&gt;父节点：Expiration&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="Days"/>
          <require value="Days和CreatedBeforeDate二选一"/>
          <type value="integer"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定未完成的Part规则的过期属性。 &lt;br&gt;类型：容器 &lt;br&gt;子节点：Days或CreatedBeforeDate  &lt;br&gt;父节点：Rule&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="AbortMultipartUpload"/>
          <require value="false"/>
          <type value="Object"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;Lifecycle配置的容器，最多可容纳1000条规则。 &lt;br&gt;类型：容器 &lt;br&gt;子节点：Rule &lt;br&gt;父节点：无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="LifecycleConfiguration"/>
          <require value="true"/>
          <schema nodeType="array">
            <schema>
              <describe value="&lt;td&gt;表述一条规则 &lt;br&gt;类型：容器 &lt;br&gt;子节点：ID，Prefix，Status，Expiration &lt;br&gt;父节点：LifecycleConfiguration&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Rule"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;指定Object规则的过期属性。 &lt;br&gt;类型：容器 &lt;br&gt;子节点：Days或CreatedBeforeDate &lt;br&gt;父节点：Rule&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Expiration"/>
                  <require value="false"/>
                  <schema value="null"/>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;规则唯一的ID。最多由255字节组成。当用户没有指定，或者该值为空时，OSS会为用户生成一个唯一值。 &lt;br&gt;类型：字符串 &lt;br&gt;子节点：无 &lt;br&gt;父节点：Rule&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="ID"/>
                  <require value="false"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;指定规则所适用的前缀。只有匹配前缀的对象才可能被该规则所影响。不可重叠。 &lt;br&gt;类型：字符串 &lt;br&gt;子节点：无 &lt;br&gt;父节点：Rule&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Prefix"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;如果其值为Enabled，那么OSS会定期执行该规则；如果是Disabled，那么OSS会忽略该规则。 &lt;br&gt;类型：字符串 &lt;br&gt;父节点：Rule &lt;br&gt;有效值：Enabled，Disabled&lt;/td&gt;"/>
                  <enum value="Enabled，Disabled"/>
                  <in value="formData"/>
                  <name value="Status"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </schema>
          </schema>
          <type value="Object"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能发起Put Bucket Lifecycle请求，否则返回403 Forbidden消息。错误码：AccessDenied。"/>
        </AccessDenied>
      </response>
      <summary value="设置Bucket中Object的生命周期规则"/>
    </node>
    <node nodeName="/PutBucketLogging">
      <describe value=" OSS提供Bucket访问日志的目的是为了方便bucket的拥有者理解和分析bucket的访问行为。OSS提供的Bucket访问日志不保证记录下每一条访问记录。  Bucket的拥有者可以为bucket开启访问日志记录功能。这个功能开启后，OSS将自动记录访问这个bucket请求的详细信息，并按照用户指定的规则，以小时为单位，将访问日志作为一个Object写入用户指定的bucket。OSS提供Bucket访问日志的目的是为了方便bucket的拥有者理解和分析bucket的访问行为。OSS提供的Bucket访问日志不保证记录下每一条访问记录。  命名规则中，TargetPrefix由用户指定；YYYY, mm, DD, HH, MM和SS分别是该Object被创建时的阿拉伯数字的年，月，日，小时，分钟和秒（注意位数）；UniqueString为OSS系统生成的字符串。一个实际的用于存储OSS访问日志的Object名称例子如下：  上例中，“MyLog-”是用户指定的Object前缀；“oss-example”是源bucket的名称；“2012-09-10-04-00-00”是该Object被创建时的北京时间；“0000” 是OSS系统生成的字符串。 &lt;ol&gt;&lt;li&gt;源Bucket和目标Bucket必须属于同一个用户。&lt;/li&gt;&lt;li&gt;上面所示的请求语法中，“BucketName”表示要开启访问日志记录的bucket；“TargetBucket”表示访问日志记录要存入的bucket；“TargetPrefix”表示存储访问日志记录的object名字前缀，可以为空。&lt;/li&gt;&lt;li&gt;源bucket和目标bucket可以是同一个Bucket，也可以是不同的Bucket；用户也可以将多个的源bucket的LOG都保存在同一个目标bucket内（建议指定不同的TargetPrefix）。&lt;/li&gt;&lt;li&gt;当关闭一个Bucket的访问日志记录功能时，只要发送一个空的BucketLoggingStatus即可，具体方法可以参考下面的请求示例。&lt;/li&gt;&lt;li&gt;所有PUT Bucket Logging请求必须带签名，即不支持匿名访问。&lt;/li&gt;&lt;li&gt;如果PUT Bucket Logging请求发起者不是源bucket（请求示例中的BucketName）的拥有者，OSS返回403错误码；&lt;/li&gt;&lt;li&gt;如果源bucket不存在，OSS返回错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;如果PUT Bucket Logging请求发起者不是目标bucket（请求示例中的TargetBucket）的拥有者，OSS返回403；如果目标bucket不存在，OSS返回错误码：InvalidTargetBucketForLogging。&lt;/li&gt;&lt;li&gt;源Bucket和目标Bucket必须属于同一个数据中心，否则返回400错误，错误码为：InvalidTargetBucketForLogging。&lt;/li&gt;&lt;li&gt;PUT Bucket Logging请求中的XML不合法，返回错误码：MalformedXML。&lt;/li&gt;&lt;li&gt;源bucket和目标bucket可以是同一个Bucket；用户也可以将不同的源bucket的LOG都保存在同一个目标bucket内（注意要指定不同的TargetPrefix）。&lt;/li&gt;&lt;li&gt;源Bucket被删除时，对应的Logging规则也将被删除。&lt;/li&gt;&lt;li&gt;OSS以小时为单位生成bucket访问的Log文件，但并不表示这个小时的所有请求都记录在这个小时的LOG文件内，也有可能出现在上一个或者下一个LOG文件中。&lt;/li&gt;&lt;li&gt;OSS生成的Log文件命名规则中的“UniqueString”仅仅是OSS为其生成的UUID，用于唯一标识该文件。&lt;/li&gt;&lt;li&gt;OSS生成一个bucket访问的Log文件，算作一次PUT操作，并记录其占用的空间，但不会记录产生的流量。LOG生成后，用户可以按照普通的Object来操作这些LOG文件。&lt;/li&gt;&lt;li&gt;OSS会忽略掉所有以“x-”开头的query-string参数，但这个query-string会被记录在访问LOG中。如果你想从海量的访问日志中，标示一个特殊的请求，可以在URL中添加一个“x-”开头的query-string参数。如：&lt;code&gt;http://oss-example.oss-cn-hangzhou.aliyuncs.com/aliyun-logo.png&lt;/code&gt;&lt;code&gt;http://oss-example.oss-cn-hangzhou.aliyuncs.com/aliyun-logo.png?x-user=admin&lt;/code&gt;OSS处理上面两个请求，结果是一样的。但是在访问LOG中，你可以通过搜索“x-user=admin”，很方便地定位出经过标记的这个请求。&lt;/li&gt;&lt;li&gt;OSS的LOG中的任何一个字段，都可能出现“-”，用于表示未知数据或对于当前请求该字段无效。&lt;/li&gt;&lt;li&gt;根据需求，OSS的LOG格式将来会在尾部添加一些字段，请开发者开发Log处理工具时考虑兼容性的问题。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;访问日志状态信息的容器&lt;br&gt;类型: 容器&lt;br&gt;子元素:   LoggingEnabled&lt;br&gt;父元素:   无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="BucketLoggingStatus"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;访问日志信息的容器。这个元素在开启时需要，关闭时不需要。&lt;br&gt;类型: 容器&lt;br&gt;子元素:   TargetBucket, TargetPrefix&lt;br&gt;父元素:   BucketLoggingStatus&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="LoggingEnabled"/>
          <require value="false"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定存放访问日志的Bucket。&lt;br&gt;类型: 字符&lt;br&gt;子元素:   无&lt;br&gt;父元素:   BucketLoggingStatus.LoggingEnabled&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="TargetBucket"/>
          <require value="在开启访问日志的时候必需"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定最终被保存的访问日志文件前缀。&lt;br&gt;类型:   字符&lt;br&gt;子元素:   None&lt;br&gt;父元素:   BucketLoggingStatus.LoggingEnabled&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="TargetPrefix"/>
          <require value="false"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <BucketName>
          <code value="403"/>
          <describe value="如果PUT Bucket Logging请求发起者不是源bucket（请求示例中的BucketName）的拥有者，OSS返回403错误码；"/>
        </BucketName>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
        <InvalidTargetBucketForLogging>
          <code value="400"/>
          <describe value="源Bucket和目标Bucket必须属于同一个数据中心，否则返回400错误，错误码为：InvalidTargetBucketForLogging。"/>
        </InvalidTargetBucketForLogging>
        <MalformedXML>
          <describe value="PUT Bucket Logging请求中的XML不合法，返回错误码：MalformedXML。"/>
        </MalformedXML>
        <NoSuchBucket>
          <describe value="如果源bucket不存在，OSS返回错误码：NoSuchBucket。"/>
        </NoSuchBucket>
      </response>
      <summary value="开启Bucket日志"/>
    </node>
    <node nodeName="/PutBucketReferer">
      <describe value=" Put Bucket Referer操作可以设置一个bucket的referer访问白名单和是否允许referer字段为空的请求访问。Bucket Referer防盗链具体见 OSS防盗链 。 &lt;ol&gt;&lt;li&gt;只有Bucket的拥有者才能发起Put Bucket Referer请求，否则返回403 Forbidden消息。错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;AllowEmptyReferer中指定的配置将替换之前的AllowEmptyReferer配置，该字段为必填项，系统中默认的AllowEmptyReferer配置为true。&lt;/li&gt;&lt;li&gt;此操作将用RefererList中的白名单列表覆盖之前配置的白名单列表，当用户上传的RefererList为空时（不包含Referer请求元素），此操作会覆盖已配置的白名单列表，即删除之前配置的RefererList。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;保存Referer配置内容的容器 &lt;br /&gt;类型：容器 &lt;br /&gt;子节点：AllowEmptyReferer节点、RefererList节点 &lt;br /&gt;父节点：无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="RefererConfiguration"/>
          <require value="true"/>
          <schema nodeType="array">
            <schema>
              <default value="true "/>
              <describe value="&lt;td&gt;指定是否允许referer字段为空的请求访问。 &lt;br /&gt;类型：枚举字符串 &lt;br /&gt;有效值：true或false 默认值：true &lt;br /&gt;父节点：RefererConfiguration&lt;/td&gt;"/>
              <enum value="true或false 默认值：true "/>
              <in value="formData"/>
              <name value="AllowEmptyReferer"/>
              <require value="true"/>
              <type value="string"/>
            </schema>
            <schema>
              <describe value="&lt;td&gt;保存referer访问白名单的容器。 &lt;br /&gt;类型：容器 &lt;br /&gt;父节点：RefererConfiguration &lt;br /&gt;子节点：Referer&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="RefererList"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;指定一条referer访问白名单。 &lt;br /&gt;类型：字符串 &lt;br /&gt;父节点：RefererList&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="Referer"/>
                  <require value="false"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </schema>
          </schema>
          <type value="Object"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket的拥有者才能发起Put Bucket Referer请求，否则返回403 Forbidden消息。错误码：AccessDenied。"/>
        </AccessDenied>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
      </response>
      <summary value="设置Bucket的防盗链规则"/>
    </node>
    <node nodeName="/PutBucketWebsite">
      <describe value=" Put Bucket Website操作可以将一个bucket设置成静态网站托管模式。 &lt;ol&gt;&lt;li&gt;所谓静态网站是指所有的网页都由静态内容构成，包括客户端执行的脚本，例如JavaScript；OSS不支持涉及到需要服务器端处理的内容，例如PHP，JSP，APS.NET等。&lt;/li&gt;&lt;li&gt;如果你想使用自己的域名来访问基于bucket的静态网站，可以通过域名CNAME来实现。具体配置方法见3.4节：自定义域名绑定。&lt;/li&gt;&lt;li&gt;用户将一个bucket设置成静态网站托管模式时，必须指定索引页面，错误页面则是可选的。&lt;/li&gt;&lt;li&gt;用户将一个bucket设置成静态网站托管模式时，指定的索引页面和错误页面是该bucket内的一个object。&lt;/li&gt;&lt;li&gt;在将一个bucket设置成静态网站托管模式后，对静态网站根域名的匿名访问，OSS将返回索引页面；对静态网站根域名的签名访问，OSS将返回Get Bucket结果。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;子元素Key的父元素&lt;br /&gt;类型: 容器&lt;br /&gt;父元素: WebsiteConfiguration&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="ErrorDocument"/>
          <require value="false"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;子元素Suffix的父元素. &lt;br /&gt;类型: 容器&lt;br /&gt;父元素: WebsiteConfiguration&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="IndexDocument"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;返回404错误时使用的文件名 &lt;br /&gt;类型:字符串  父元素: WebsiteConfiguration.ErrorDocument&lt;br /&gt;有条件：当ErrorDocument设置时，必需&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="Key"/>
          <require value="有条件"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;返回目录URL时添加的索引文件名，不要为空，也不要包含&quot;/&quot;。例如索引文件设置为index.html，则访问:oss-cn-hangzhou.aliyuncs.com/mybucket/mydir/这样请求的时候默认都相当于访问oss-cn-hangzhou.aliyuncs.com/mybucket/index.html &lt;br /&gt;类型:字符串&lt;br /&gt;父元素: WebsiteConfiguration.IndexDocument&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="Suffix"/>
          <require value="true"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;请求的容器 &lt;br /&gt;类型：容器&lt;br /&gt;父元素: 无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="WebsiteConfiguration"/>
          <require value="true"/>
          <type value="Object"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
      </response>
      <summary value="设置Bucket为静态网站托管模式"/>
    </node>
    <node nodeName="/PutBucketcors">
      <describe value=" Put Bucket cors操作将在指定的bucket上设定一个跨域资源共享(CORS)的规则，如果原规则存在则覆盖原规则。 &lt;ol&gt;&lt;li&gt;默认bucket是不开启CORS功能，所有的跨域请求的origin都不被允许。&lt;/li&gt;&lt;li&gt;为了在应用程序中使用CORS功能，比如从一个www.a.com的网址通过浏览器的XMLHttpRequest功能来访问OSS，需要通过本接口手动上传CORS规则来开启。该规则由XML文档来描述。&lt;/li&gt;&lt;li&gt;每个bucket的CORS设定是由多条CORS规则指定的，每个bucket最多允许10条规则，上传的XML文档最多允许16KB大小。&lt;/li&gt;&lt;li&gt;当OSS收到一个跨域请求（或者OPTIONS请求），会读取bucket对应的CORS规则，然后进行相应的权限检查。OSS会依次检查每一条规则，使用第一条匹配的规则来允许请求并返回对应的header。如果所有规则都匹配失败则不附加任何CORS相关的header。&lt;/li&gt;&lt;li&gt;CORS规则匹配成功必须满足三个条件，首先，请求的Origin必须匹配一项AllowedOrigin项，其次，请求的方法（如GET，PUT等）或者OPTIONS请求的Access-Control-Request-Method头对应的方法必须匹配一项AllowedMethod项，最后，OPTIONS请求的Access-Control-Request-Headers头包含的每个header都必须匹配一项AllowedHeader项。&lt;/li&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;指定允许的跨域请求的来源，允许使用多个元素来指定多个允许的来源。   允许使用最多一个“*”通配符。如果指定为“*”则表示允许所有的来源的跨域请求。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="AllowedOrigin"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;控制在OPTIONS预取指令中Access-Control-Request-Headers头中指定的header是否允许。在Access-Control-Request-Headers中指定的每个header都必须在AllowedHeader中有一条对应的项。允许使用最多一个“*”通配符   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="AllowedHeader"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定浏览器对特定资源的预取（OPTIONS）请求返回结果的缓存时间，单位为秒。   一个CORSRule里面最多允许出现一个。   &lt;br /&gt;类型：整型   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="MaxAgeSeconds"/>
          <require value="false"/>
          <type value="整型"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;Bucket的CORS规则容器   &lt;br /&gt;类型：容器   &lt;br /&gt;父节点：无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="CORSConfiguration"/>
          <require value="true"/>
          <schema nodeType="array">
            <schema>
              <describe value="&lt;td&gt;CORS规则的容器，每个bucket最多允许10条规则   &lt;br /&gt;类型：容器   &lt;br /&gt;父节点：CORSConfiguration&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CORSRule"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;指定允许的跨域请求方法。   &lt;br /&gt;类型：枚举（GET,PUT,DELETE,POST,HEAD）   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="AllowedMethod"/>
                  <require value="true"/>
                  <type value="枚举（GET"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;指定允许用户从应用程序中访问的响应头（例如一个Javascript的XMLHttpRequest对象。）不允许使用“*”通配符。   &lt;br /&gt;类型：字符串   &lt;br /&gt;父节点：CORSRule&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="ExposeHeader"/>
                  <require value="false"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </schema>
          </schema>
          <type value="Object"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
      </response>
      <summary value="在指定Bucket设定一个CORS的规则"/>
    </node>
    <node nodeName="/PutLiveChannel">
      <describe value=" 通过RTMP协议上传音视频数据前，必须先调用该接口来创建一个LiveChannel。该接口会返回RTMP推流地址，以及对应的播放地址。用户可以使用返回的地址进行推流、播放。另外，用户可以根据该LiveChannel的名称来发起相关的操作，如查询推流状态、查询推流记录、禁止推流等。 &lt;ol&gt;&lt;li&gt;ChannelName必须符合ObjectName的命名规范，另外，ChannelName不能包含”/“。&lt;/li&gt;&lt;li&gt;FragDuration和FragCount的默认值只有在两者都未指定时才会生效；指定了其中一个，则另一个的值也必须指定。&lt;/li&gt;&lt;li&gt;转储类型为HLS时，OSS会在生成每个ts文件后，更新m3u8文件；m3u8文件中最多包含最近的FragCount个ts文件。&lt;/li&gt;&lt;li&gt;转储类型为HLS时，写入当前ts文件的音视频数据时长达到FragDuration指定的时长后，OSS会在收到下一个关键帧的时候切换到下一个ts文件；如果max(2*FragDuration, 60s)后仍未收到下一个关键帧，OSS强制切换文件，此时可能引起播放时卡顿。&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;推流地址是未加签名的url，如果bucket acl非public-read-write，那么需要首先进行签名才能进行访问。&lt;/li&gt;&lt;li&gt;播放地址是未加签名的url，如果bucket acl为private，那么需要首先进行签名才能进行访问。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;保存LiveChannel配置的容器。&lt;br&gt; 类型：容器 &lt;br&gt;子节点：Description、Status、Target&lt;br&gt;父节点：无&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="LiveChannelConfiguration"/>
          <require value="true"/>
          <schema nodeType="array">
            <schema>
              <describe value="&lt;td&gt;LiveChannel的描述信息，最长128字节。&lt;br&gt; 类型：字符串 &lt;br&gt;子节点：无&lt;br&gt; 父节点：LiveChannelConfiguration&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Description"/>
              <require value="false"/>
              <type value="string"/>
            </schema>
            <schema>
              <describe value="&lt;td&gt;指定LiveChannel的状态。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：LiveChannelConfiguration&lt;br&gt;有效值：enabled、disabled&lt;/td&gt;"/>
              <enum value="enabled、disabled"/>
              <in value="formData"/>
              <name value="Status"/>
              <require value="false"/>
              <type value="string"/>
            </schema>
            <schema>
              <describe value="&lt;td&gt;保存转储配置的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Type、FragDuration、FragCount、PlaylistName&lt;br&gt;父节点：LiveChannelConfiguration&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="Target"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;指定转储的类型。&lt;br&gt;类型：枚举字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Target&lt;br&gt;有效值：HLS&lt;/td&gt;"/>
                  <enum value="HLS"/>
                  <in value="formData"/>
                  <name value="Type"/>
                  <require value="true"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;当Type为HLS时，指定m3u8文件中包含ts文件的个数，取值范围为[1, 100]的整数。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Target&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="FragCount"/>
                  <require value="false"/>
                  <type value="string"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;当Type为HLS时，指定生成的m3u8文件的名称，必须以”.m3u8”结尾，长度范围为[6, 128]。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：Target&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="PlaylistName"/>
                  <require value="false"/>
                  <type value="string"/>
                </schema>
              </schema>
              <type value="Object"/>
            </schema>
          </schema>
          <type value="Object"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;当Type为HLS时，指定每个ts文件的时长（单位：秒），取值范围为[1, 100]的整数。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点: Target&lt;/td&gt;"/>
          <in value="formData"/>
          <name value="FragDuration"/>
          <require value="false"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <describe value="&lt;td&gt;保存CreateLiveChannel请求结果的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：PublishUrls,PlayUrls&lt;br&gt;父节点：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="CreateLiveChannelResult"/>
              <require value="true"/>
              <schema nodeType="array">
                <schema>
                  <describe value="&lt;td&gt;保存推流地址的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Url&lt;br&gt;父节点：CreateLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="PublishUrls"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;推流地址。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：PublishUrls&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Url"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
                <schema>
                  <describe value="&lt;td&gt;保存推流地址的容器。&lt;br&gt;类型：容器&lt;br&gt;子节点：Url&lt;br&gt;父节点：CreateLiveChannelResult&lt;/td&gt;"/>
                  <in value="formData"/>
                  <name value="PlayUrls"/>
                  <require value="true"/>
                  <schema nodeType="array">
                    <schema>
                      <describe value="&lt;td&gt;播放地址。&lt;br&gt;类型：字符串&lt;br&gt;子节点：无&lt;br&gt;父节点：PlayUrls&lt;/td&gt;"/>
                      <in value="formData"/>
                      <name value="Url"/>
                      <require value="true"/>
                      <type value="string"/>
                    </schema>
                  </schema>
                  <type value="Object"/>
                </schema>
              </schema>
              <type value="Object"/>
            </properties>
          </properties>
        </node>
      </response>
      <summary value="PutLiveChannel"/>
    </node>
    <node nodeName="/PutLiveChannelStatus">
      <describe value=" LiveChannel有两种Status：enabled和disabled，用户可以使用本接口在两种Status之间进行切换。处于disabled状态时，OSS会禁止用户向该LiveChannel进行推流操作；如果有用户正在向该LiveChannel推流，那么推流的客户端会被强制断开（可能会有10s左右的延迟）。  PUT /ChannelName?live&amp;status=NewStatus HTTP/1.1Date: GMT dateHost: BucketName.oss-cn-hangzhou.aliyuncs.comAuthorization: SignatureValue &lt;ol&gt;&lt;li&gt;当没有客户端向该LiveChannel推流时，调用PutLiveChannel重新创建LiveChannel也可以达到修改Status的目的。&lt;/li&gt;&lt;li&gt;当有客户端向该LiveChannel推流时，无法调用PutLiveChannel重新创建LiveChannel，只能通过本接口修改LiveChannel的状态为disabled。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <describe value="&lt;td&gt;指定LiveChannel的目标Status。&lt;br&gt; 有效值：enabled、disabled&lt;/td&gt;"/>
          <enum value="enabled、disabled"/>
          <in value="quary"/>
          <name value="NewStatus"/>
          <require value="true"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
      </response>
      <summary value="PutLiveChannelStatus"/>
    </node>
    <node nodeName="/PutObject">
      <describe value=" Put Object用于上传文件。 &lt;ol&gt;&lt;li&gt;如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。&lt;/li&gt;&lt;li&gt;如果请求头中的“Content-Length”值小于实际请求体（body）中传输的数据长度，OSS仍将成功创建文件；但Object大小只等于“Content-Length”中定义的大小，其他数据将被丢弃。&lt;/li&gt;&lt;li&gt;如果试图添加的Object的同名文件已经存在，并且有访问权限。新添加的文件将覆盖原来的文件，成功返回200 OK。&lt;/li&gt;&lt;li&gt;如果在PutObject的时候，携带以x-oss-meta-为前缀的参数，则视为user meta，比如x-oss-meta-location。一个Object可以有多个类似的参数，但所有的user meta总大小不能超过8k。&lt;/li&gt;&lt;li&gt;如果Head中没有加入Content length参数，会返回411 Length Required错误。错误码：MissingContentLength。&lt;/li&gt;&lt;li&gt;如果设定了长度，但是没有发送消息Body，或者发送的body大小小于给定大小，服务器会一直等待，直到time out，返回400 Bad Request消息。错误码：RequestTimeout。&lt;/li&gt;&lt;li&gt;如果试图添加的Object所在的Bucket不存在，返回404 Not Found错误。错误码：NoSuchBucket。&lt;/li&gt;&lt;li&gt;如果试图添加的Object所在的Bucket没有访问权限，返回403 Forbidden错误。错误码：AccessDenied。&lt;/li&gt;&lt;li&gt;如果添加文件长度超过5G，返回错误消息400 Bad Request。错误码：InvalidArgument。&lt;/li&gt;&lt;li&gt;如果传入的Object key长度大于1023字节，返回400 Bad Request。错误码：InvalidObjectName。&lt;/li&gt;&lt;li&gt;PUT一个Object的时候，OSS支持5个 HTTP &lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;协议规定的Header 字段：Cache-Control、Expires、Content-Encoding、Content-Disposition、Content-Type。如果上传Object时设置了这些Header，则这个Object被下载时，相应的Header值会被自动设置成上传时的值。&lt;/li&gt;&lt;li&gt;如果上传Object时指定了x-oss-server-side-encryption Header，则必须设置其值为AES256，否则会返回400和相应错误提示：InvalidEncryptionAlgorithmError。指定该Header后，在响应头中也会返回该Header，OSS会对上传的Object进行加密编码存储，当这个Object被下载时，响应头中会包含x-oss-server-side-encryption，值被设置成该Object的加密算法。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array">
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的网页的缓存行为；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Cache-Control"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的名称；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-Disposition"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None"/>
          <describe value="&lt;td&gt;指定该Object被下载时的内容编码格式；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-Encoding"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None   "/>
          <describe value="&lt;td&gt;根据协议RFC 1864对消息内容（不包括头部）计算MD5值获得128比特位数字，对该数字进行base64编码为一个消息的Content-MD5值。该请求头可用于消息合法性的检查（消息内容是否与发送时一致）。虽然该请求头是可选项，OSS建议用户使用该请求头进行端到端检查。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无   &lt;br /&gt;限制：无&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Content-MD5"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <default value="None  "/>
          <describe value="&lt;td&gt;过期时间；更详细描述请参照&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无  &lt;br /&gt;&lt;strong&gt;注意&lt;/strong&gt;：OSS不会对这个值进行限制和验证&lt;/td&gt;"/>
          <in value="header"/>
          <name value="Expires"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定oss创建object时的服务器端加密编码算法。   &lt;br /&gt;类型：字符串   &lt;br /&gt;合法值：AES256&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-server-side-encryption"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
        <parameters>
          <describe value="&lt;td&gt;指定oss创建object时的访问权限。   &lt;br /&gt;类型：字符串   &lt;br /&gt;合法值：public-read，private，public-read-write&lt;/td&gt;"/>
          <in value="header"/>
          <name value="x-oss-object-acl"/>
          <require value="true"/>
          <type value="string"/>
        </parameters>
      </parameters>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="如果试图添加的Object所在的Bucket没有访问权限，返回403 Forbidden错误。错误码：AccessDenied。"/>
        </AccessDenied>
        <InvalidArgument>
          <code value="400"/>
          <describe value="如果添加文件长度超过5G，返回错误消息400 Bad Request。错误码：InvalidArgument。"/>
        </InvalidArgument>
        <InvalidDigest>
          <describe value="如果用户上传了Content-MD5请求头，OSS会计算body的Content-MD5并检查一致性，如果不一致，将返回InvalidDigest错误码。"/>
        </InvalidDigest>
        <InvalidObjectName>
          <code value="400"/>
          <describe value="如果传入的Object key长度大于1023字节，返回400 Bad Request。错误码：InvalidObjectName。"/>
        </InvalidObjectName>
        <MissingContentLength>
          <code value="411"/>
          <describe value="如果Head中没有加入Content length参数，会返回411 Length Required错误。错误码：MissingContentLength。"/>
        </MissingContentLength>
        <NoSuchBucket>
          <code value="404"/>
          <describe value="如果试图添加的Object所在的Bucket不存在，返回404 Not Found错误。错误码：NoSuchBucket。"/>
        </NoSuchBucket>
        <RequestTimeout>
          <code value="400"/>
          <describe value="如果设定了长度，但是没有发送消息Body，或者发送的body大小小于给定大小，服务器会一直等待，直到time out，返回400 Bad Request消息。错误码：RequestTimeout。"/>
        </RequestTimeout>
      </response>
      <summary value="上传object"/>
    </node>
    <node nodeName="/PutObjectACL">
      <describe value=" Put Object ACL接口用于修改Object的访问权限。目前Object有三种访问权限：private, public-read, public-read-write。Put Object ACL操作通过Put请求中的“x-oss-object-acl”头来设置，这个操作只有Bucket Owner有权限执行。如果操作成功，则返回200；否则返回相应的错误码和提示信息。 &lt;ol&gt;&lt;li&gt;Object的读操作包括：GetObject，HeadObject，CopyObject和UploadPartCopy中的对source object的读；Object的写操作包括：PutObject，PostObject，AppendObject，DeleteObject，DeleteMultipleObjects，CompleteMultipartUpload以及CopyObject对新的Object的写。&lt;/li&gt;&lt;li&gt;x-oss-object-acl中权限的值必须在上述3种权限中。如果有不属于上述3种的权限，OSS返回400 Bad Request消息，错误码：InvalidArgument。&lt;/li&gt;&lt;li&gt;用户不仅可以通过PutObjectACL接口来设置Object ACL，还可以在Object的写操作时，在请求头中带上x-oss-object-acl来设置Object ACL，效果与PutObjectA ACL等同。例如PutObject时在请求头中带上x-oss-object-acl可以在上传一个Object的同时设置某个Object的ACL。&lt;/li&gt;&lt;li&gt;对某个Object没有读权限的用户读取某个Object时，OSS返回 403 Forbidden消息，错误码：AccessDenied，提示：You do not have read permission on this object.&lt;/li&gt;&lt;li&gt;对某个Object没有写权限的用户写某个Object时，OSS返回 403 Forbidden消息，错误码：AccessDenied，提示：You do not have write permission on this object.&lt;/li&gt;&lt;li&gt;只有Bucket Owner采用权限调用PutObjectACL来修改该Bucket下某个Object的ACL。非Bucket Owner调用PutObjectACL时，OSS返回 403 Forbidden消息，错误码：AccessDenied，提示：You do not have write acl permission on this object.&lt;/li&gt;&lt;li&gt;Object ACL优先级高于Bucket ACL。例如Bucket ACL是private的，而Object ACL是public-read-write的，则访问这个Object时，先判断Object的ACL，所以所有用户都拥有这个Object的访问权限，即使这个Bucket是private bucket。如果某个Object从来没设置过ACL，则访问权限遵循Bucket ACL。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <AccessDenied>
          <code value="403"/>
          <describe value="只有Bucket Owner采用权限调用PutObjectACL来修改该Bucket下某个Object的ACL。非Bucket Owner调用PutObjectACL时，OSS返回 403 Forbidden消息，错误码：AccessDenied，提示：You do not have write acl permission on this object."/>
        </AccessDenied>
        <InvalidArgument>
          <code value="400"/>
          <describe value="x-oss-object-acl中权限的值必须在上述3种权限中。如果有不属于上述3种的权限，OSS返回400 Bad Request消息，错误码：InvalidArgument。"/>
        </InvalidArgument>
      </response>
      <summary value="设置Object ACL"/>
    </node>
    <node nodeName="/UploadPart">
      <describe value=" 初始化一个Multipart Upload之后，可以根据指定的Object名和Upload ID来分块（Part）上传数据。每一个上传的Part都有一个标识它的号码（part number，范围是1~10,000）。对于同一个Upload ID，该号码不但唯一标识这一块数据，也标识了这块数据在整个文件内的相对位置。如果你用同一个part号码，上传了新的数据，那么OSS上已有的这个号码的Part数据将被覆盖。除了最后一块Part以外，其他的part最小为100KB；最后一块Part没有大小限制。 &lt;ol&gt;&lt;li&gt;调用该接口上传Part数据前，必须调用Initiate Multipart Upload接口，获取一个OSS服务器颁发的Upload ID。&lt;/li&gt;&lt;li&gt;Multipart Upload要求除最后一个Part以外，其他的Part大小都要大于100KB。但是Upload Part接口并不会立即校验上传Part的大小（因为不知道是否为最后一块）；只有当Complete Multipart Upload的时候才会校验。&lt;/li&gt;&lt;li&gt;OSS会将服务器端收到Part数据的MD5值放在ETag头内返回给用户。&lt;/li&gt;&lt;li&gt;Part号码的范围是1~10000。如果超出这个范围，OSS将返回InvalidArgument的错误码。&lt;/li&gt;&lt;li&gt;若调用Initiate Multipart Upload接口时，指定了x-oss-server-side-encryption请求头，则会对上传的Part进行加密编码，并在Upload Part响应头中返回x-oss-server-side-encryption头，其值表明该Part的服务器端加密算法，具体见Initiate Multipart Upload接口。6.为了保证数据在网络传输过程中不出现错误，用户发送请求时携带Content-MD5，OSS会计算上传数据的MD5与用户上传的MD5值比较，如果不一致返回InvalidDigest错误码。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array"/>
        </node>
        <InvalidArgument>
          <describe value="Part号码的范围是1~10000。如果超出这个范围，OSS将返回InvalidArgument的错误码。"/>
        </InvalidArgument>
        <InvalidDigest>
          <describe value="若调用Initiate Multipart Upload接口时，指定了x-oss-server-side-encryption请求头，则会对上传的Part进行加密编码，并在Upload Part响应头中返回x-oss-server-side-encryption头，其值表明该Part的服务器端加密算法，具体见Initiate Multipart Upload接口。6.为了保证数据在网络传输过程中不出现错误，用户发送请求时携带Content-MD5，OSS会计算上传数据的MD5与用户上传的MD5值比较，如果不一致返回InvalidDigest错误码。"/>
        </InvalidDigest>
      </response>
      <summary value="分块上传文件"/>
    </node>
    <node nodeName="/UploadPartCopy">
      <describe value=" Upload Part Copy通过从一个已存在的Object中拷贝数据来上传一个Part。通过在Upload Part请求的基础上增加一个Header:x-oss-copy-source来调用该接口。当拷贝一个大于1GB的文件时，必须使用Upload Part Copy的方式进行拷贝。如果想通过单个操作拷贝小于1GB的文件，可以参考Copy Object。  除了通用的请求Header，Upload Part Copy请求中通过下述Header指定拷贝的源Object地址和拷贝的范围。  下述请求Header作用于x-oss-copy-source指定的源Object。 &lt;ol&gt;&lt;li&gt;调用该接口上传Part数据前，必须调用Initiate Multipart Upload接口，获取一个OSS服务器颁发的Upload ID。&lt;/li&gt;&lt;li&gt;Multipart Upload要求除最后一个Part以外，其他的Part大小都要大于100KB。但是Upload Part接口并不会立即校验上传Part的大小（因为不知道是否为最后一块）；只有当Complete Multipart Upload的时候才会校验。&lt;/li&gt;&lt;li&gt;不指定x-oss-copy-source-range请求头时，表示拷贝整个源Object。当指定该请求头时，则返回消息中会包含整个文件的长度和此次拷贝的范围，例如：Content-Range: bytes 0-9/44，表示整个文件长度为44，此次拷贝的范围为0-9。当指定的范围不符合范围规范时，则拷贝整个文件，并且不在结果中提及Content-Range。&lt;/li&gt;&lt;li&gt;若调用Initiate Multipart Upload接口时，指定了x-oss-server-side-encryption请求头，则会对上传的Part进行加密编码，并在Upload Part响应头中返回x-oss-server-side-encryption头，其值表明该Part的服务器端加密算法，具体见Initiate Multipart Upload接口。&lt;/li&gt;&lt;li&gt;该操作不能拷贝通过Append追加上传方式产生的object。&lt;/li&gt;&lt;li&gt;如果Bucket的类型为Archive，则不能调用该接口，否则返回400错误，错误码为OperationNotSupported。&lt;/li&gt;&lt;/ol&gt;"/>
      <parameters nodeType="array"/>
      <response>
        <node nodeName="200">
          <describe value="success response"/>
          <properties nodeType="array">
            <properties>
              <default value="None"/>
              <describe value="&lt;td&gt;如果源Object的ETAG值和用户提供的ETAG相等，则执行拷贝操作；否则返回412   HTTP错误码（预处理失败）。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="x-oss-copy-source-if-match"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <default value="None"/>
              <describe value="&lt;td&gt;如果源Object自从用户指定的时间以后就没有被修改过，则执行拷贝操作；否则返回412   HTTP错误码（预处理失败）。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="x-oss-copy-source-if-none-match"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <default value="None"/>
              <describe value="&lt;td&gt;如果传入参数中的时间等于或者晚于文件实际修改时间，则正常传输文件，并返回200 OK；否则返回412   precondition failed错误。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="x-oss-copy-source-if-unmodified-since"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
            <properties>
              <default value="None"/>
              <describe value="&lt;td&gt;如果源Object自从用户指定的时间以后被修改过，则执行拷贝操作；否则返回412   HTTP错误码（预处理失败）。   &lt;br&gt;类型：字符串   &lt;br&gt;默认值：无&lt;/td&gt;"/>
              <in value="formData"/>
              <name value="x-oss-copy-source-if-modified-since"/>
              <require value="true"/>
              <type value="string"/>
            </properties>
          </properties>
        </node>
        <OperationNotSupported>
          <code value="400"/>
          <describe value="如果Bucket的类型为Archive，则不能调用该接口，否则返回400错误，错误码为OperationNotSupported。"/>
        </OperationNotSupported>
      </response>
      <summary value="分块复制上传文件"/>
    </node>
  </paths>
  <responses nodeType="array">
    <responses>
      <default value="None   "/>
      <describe value="&lt;td&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt;中定义的HTTP请求内容长度。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无   &lt;br /&gt;使用场景：需要向OSS提交数据的请求&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Content-Length"/>
      <require value="true"/>
      <type value="string"/>
    </responses>
    <responses>
      <default value="None"/>
      <describe value="&lt;td&gt;标明客户端和OSS服务器之间的链接状态。   &lt;br /&gt;类型：枚举   有效值：open、close   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
      <enum value="open、close   "/>
      <in value="header"/>
      <name value="Connection"/>
      <require value="true"/>
      <type value="枚举"/>
    </responses>
    <responses>
      <default value="None"/>
      <describe value="&lt;td&gt;HTTP 1.1协议中规定的GMT时间，例如：Wed,   05 Sep. 2012 23:00:00 GMT   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Date"/>
      <require value="true"/>
      <type value="string"/>
    </responses>
    <responses>
      <default value="None"/>
      <describe value="&lt;td&gt;ETag   (entity tag) 在每个Object生成的时候被创建，用于标示一个Object的内容。对于Put Object请求创建的Object，ETag值是其内容的MD5值；对于其他方式创建的Object，ETag值是其内容的UUID。ETag值可以用于检查Object内容是否发生变化。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
      <in value="header"/>
      <name value="ETag"/>
      <require value="true"/>
      <type value="string"/>
    </responses>
    <responses>
      <default value="AliyunOSS"/>
      <describe value="&lt;td&gt;生成Response的服务器。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：AliyunOSS&lt;/td&gt;"/>
      <in value="header"/>
      <name value="Server"/>
      <require value="true"/>
      <type value="string"/>
    </responses>
    <responses>
      <default value="None"/>
      <describe value="&lt;td&gt;x-oss-request-id是由Aliyun   OSS创建，并唯一标识这个response的UUID。如果在使用OSS服务时遇到问题，可以凭借该字段联系OSS工作人员，快速定位问题。   &lt;br /&gt;类型：字符串   &lt;br /&gt;默认值：无&lt;/td&gt;"/>
      <in value="header"/>
      <name value="x-oss-request-id"/>
      <require value="true"/>
      <type value="string"/>
    </responses>
  </responses>
  <swagger value="2.0"/>
  <x-vee value="2.0 AS"/>
</root>
